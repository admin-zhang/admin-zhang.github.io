{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "以梦为马，不负韶华",
    "icon": "http://blog.icoders.club/assets/favicon.ico",
    "description": "",
    "home_page_url": "http://blog.icoders.club",
    "items": [
        {
            "id": "http://blog.icoders.club/String-in-Java/",
            "url": "http://blog.icoders.club/String-in-Java/",
            "title": "深入理解 Java 中的 == 和 equals()（面试高频）",
            "date_published": "2025-07-29T15:06:03.253Z",
            "content_html": "<h1 id=\"深入理解-java-中的-和-equals\"><a class=\"anchor\" href=\"#深入理解-java-中的-和-equals\">#</a> 📌 深入理解 Java 中的 == 和 equals ()</h1>\n<p><code>==</code>  和  <code>equals()</code>  是 Java 面试中最常见但也最容易出错的知识点之一，尤其涉及到字符串、包装类型和对象比较时。本文将全面分析它们的差异，并结合常见陷阱、底层原理和面试追问，为你打下扎实的基础。</p>\n<hr />\n<h2 id=\"基本区别-vs-equals\"><a class=\"anchor\" href=\"#基本区别-vs-equals\">#</a> ❓基本区别： <code>==</code>  vs  <code>equals()</code></h2>\n<h3 id=\"基本数据类型primitive-types\"><a class=\"anchor\" href=\"#基本数据类型primitive-types\">#</a> 🔹 基本数据类型（primitive types）</h3>\n<ul>\n<li><code>==</code> ：比较的是数值是否相等。</li>\n<li><code>equals()</code> ：不可用（会报错）。</li>\n</ul>\n<h3 id=\"引用数据类型reference-types\"><a class=\"anchor\" href=\"#引用数据类型reference-types\">#</a> 🔹 引用数据类型（reference types）</h3>\n<ul>\n<li><code>==</code> ：比较的是<strong>内存地址</strong>（是否是同一个对象）。</li>\n<li><code>equals()</code> ：\n<ul>\n<li>默认继承自  <code>Object</code> ，也是比较地址；</li>\n<li>但很多类（如  <code>String</code> ,  <code>Integer</code> ,  <code>List</code> ）都<strong>重写了 equals 方法</strong>，用于比较内容。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h2 id=\"示例字符串比较\"><a class=\"anchor\" href=\"#示例字符串比较\">#</a> 🔍 示例：字符串比较</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//false（不同对象）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true（内容相等）</span></pre></td></tr></table></figure><h2 id=\"intern-方法与常量池的作用\"><a class=\"anchor\" href=\"#intern-方法与常量池的作用\">#</a> 🧠 intern () 方法与常量池的作用</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h3 id=\"解释\"><a class=\"anchor\" href=\"#解释\">#</a> ✨ 解释：</h3>\n<ul>\n<li><code>&quot;hello&quot;</code>  是常量池中的字符串；</li>\n<li><code>new String(&quot;hello&quot;)</code>  会在堆中创建新的对象；</li>\n<li><code>intern()</code>  会返回常量池中的引用。</li>\n</ul>\n<hr />\n<h2 id=\"常见延伸面试题\"><a class=\"anchor\" href=\"#常见延伸面试题\">#</a> 🔗 常见延伸面试题</h2>\n<h3 id=\"abc-abc-为何为-true\"><a class=\"anchor\" href=\"#abc-abc-为何为-true\">#</a> ✅  <code>&quot;abc&quot; == &quot;abc&quot;</code>  为何为 true？</h3>\n<p>两个都是字符串字面量，编译时被优化为常量池的同一引用。</p>\n<hr />\n<h3 id=\"new-stringabc-abc-为何为-false\"><a class=\"anchor\" href=\"#new-stringabc-abc-为何为-false\">#</a> ✅  <code>new String(&quot;abc&quot;) == &quot;abc&quot;</code>  为何为 false？</h3>\n<ul>\n<li><code>new String(&quot;abc&quot;)</code>  是堆中新对象；</li>\n<li><code>&quot;abc&quot;</code>  是常量池中的对象；</li>\n<li>所以  <code>==</code>  比较为 false，地址不同。</li>\n</ul>\n<hr />\n<h3 id=\"equals-与-hashcode-为什么要同时重写\"><a class=\"anchor\" href=\"#equals-与-hashcode-为什么要同时重写\">#</a> ✅ equals () 与 hashCode () 为什么要同时重写？</h3>\n<p>Java 容器（如 HashMap）依赖 hashCode 进行定位，equals 判断相等性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>若只重写 equals，不重写 hashCode，会导致对象相等却存储在不同桶中，行为不一致。</p>\n<h3 id=\"integer-a-128-integer-b-128-a-b-为何为-false\"><a class=\"anchor\" href=\"#integer-a-128-integer-b-128-a-b-为何为-false\">#</a> ✅  <code>Integer a = 128; Integer b = 128; a == b</code>  为何为 false？</h3>\n<p>Java 对  <code>Integer</code>  做了 <strong>值缓存</strong>（-128 ~ 127）。超出该范围会 new 新对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> y <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Integer</span> m <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><hr />\n<h3 id=\"如何避免空指针异常判断字符串\"><a class=\"anchor\" href=\"#如何避免空指针异常判断字符串\">#</a> ✅ 如何避免空指针异常判断字符串？</h3>\n<p><strong>推荐写法：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 安全，不会报 NullPointerException</span></pre></td></tr></table></figure><p><strong>不推荐写法：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若 str 为 null，会报错</span></pre></td></tr></table></figure><hr />\n<h2 id=\"总结归纳\"><a class=\"anchor\" href=\"#总结归纳\">#</a> 🧾 总结归纳</h2>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>基本类型</th>\n<th>引用类型（==）</th>\n<th>引用类型（equals）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>比较内容</td>\n<td>数值</td>\n<td>地址（是否是同一对象）</td>\n<td>内容（是否相等）</td>\n</tr>\n<tr>\n<td>是否可重写</td>\n<td>❌ 不适用</td>\n<td>❌ 不可重写</td>\n<td>✅ 可自定义逻辑</td>\n</tr>\n<tr>\n<td>使用建议</td>\n<td>用  <code>==</code></td>\n<td>判断是否为同一对象</td>\n<td>判断值是否相等（推荐）</td>\n</tr>\n<tr>\n<td>常见陷阱</td>\n<td>无</td>\n<td>String、包装类对象</td>\n<td>需搭配 hashCode 重写</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"知识串联面试问答路径\"><a class=\"anchor\" href=\"#知识串联面试问答路径\">#</a> 📂 知识串联：面试问答路径</h2>\n<figure class=\"highlight plaintext\"><figcaption data-lang=\"plaintext\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>└── == 和 equals 区别？</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ├── \"abc\" == \"abc\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ├── new String(\"abc\") == \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ├── equals 与 hashCode 的关系？</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ├── Integer 缓存比较陷阱</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    └── 字符串 null 判断技巧</pre></td></tr></table></figure><hr />\n<h2 id=\"面试建议\"><a class=\"anchor\" href=\"#面试建议\">#</a> 🎯 面试建议</h2>\n<ul>\n<li>遇到引用类型，一律使用  <code>equals()</code>  进行内容比较；</li>\n<li>包装类型（如 Integer、Boolean）也存在自动装箱带来的引用陷阱；</li>\n<li>面试时可顺带讲解  <code>intern()</code>  和常量池优化，加分项！</li>\n</ul>\n",
            "tags": [
                "Java",
                "面试"
            ]
        },
        {
            "id": "http://blog.icoders.club/java-interview-basics-01/",
            "url": "http://blog.icoders.club/java-interview-basics-01/",
            "title": "Java模拟面试题-基础篇-01",
            "date_published": "2025-07-29T13:51:14.000Z",
            "content_html": "<h2 id=\"java-面试模拟系列\"><a class=\"anchor\" href=\"#java-面试模拟系列\">#</a> Java 面试模拟系列 🧠📘</h2>\n<blockquote>\n<p>该系列文档基于真实面试准备过程，通过 ChatGPT 辅助问答，对高频 Java 面试题进行整理与答疑。每篇文档聚焦一个主题，覆盖基础、集合、JVM、并发、网络等模块。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>文章标题</th>\n<th>内容简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td><a href=\"/java-interview-basics-01/\" title=\"Java模拟面试题-基础篇-01\">Java 模拟面试题(基础篇01)</a></td>\n<td>Java 基础知识模拟问答</td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"/java-interview-question-01/\" title=\"Java模拟面试题（1）\">Java 模拟面试题(1)</a></td>\n<td>集合框架、JMM 内存模型等基础进阶题</td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"/java-interview-question-02/\" title=\"Java模拟面试题（2）\">Java 模拟面试题(2)</a></td>\n<td>Java 四种引用类型等进阶题</td>\n</tr>\n<tr>\n<td>...</td>\n<td>🔄 持续更新中</td>\n<td>JVM、并发、Spring 等模块</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>📌 推荐使用场景：</p>\n<ul>\n<li>准备面试前的快速复盘</li>\n<li>学习 Java 各模块的知识要点</li>\n<li>与 ChatGPT 配合自测提问训练</li>\n</ul>\n<p>🚀 持续优化中，欢迎 Star &amp; 分享！</p>\n</blockquote>\n<h2 id=\"java-基础与进阶\"><a class=\"anchor\" href=\"#java-基础与进阶\">#</a> 💡Java 基础与进阶</h2>\n<h3 id=\"问题1java-中-和-equals-的区别请举例说明\"><a class=\"anchor\" href=\"#问题1java-中-和-equals-的区别请举例说明\">#</a> ❓问题 1：Java 中  <code>==</code>  和  <code>equals()</code>  的区别？请举例说明。</h3>\n<blockquote>\n<p>详解可参考： <a href=\"/String-in-Java/\" title=\"深入理解 Java 中的 &#x3D;&#x3D; 和 equals()（面试高频）\">深入理解 Java 中的 &#x3D;&#x3D; 和 equals()</a></p>\n</blockquote>\n<h4 id=\"分析可从如下角度进行回答\"><a class=\"anchor\" href=\"#分析可从如下角度进行回答\">#</a> ✨分析：可从如下角度进行回答</h4>\n<ul>\n<li>对于基本类型 vs 引用类型</li>\n<li>equals 默认行为及如何重写</li>\n<li>常见面试陷阱，如 String 比较</li>\n</ul>\n<h4 id=\"答案\"><a class=\"anchor\" href=\"#答案\">#</a> ✅答案：</h4>\n<p>在 Java 中， <code>==</code>  和  <code>equals()</code>  的区别主要体现在<strong>基本数据类型</strong>与<strong>引用类型</strong>的处理上：</p>\n<h5 id=\"对于基本类型\"><a class=\"anchor\" href=\"#对于基本类型\">#</a> 🧩 对于基本类型：</h5>\n<ul>\n<li><code>==</code>  比较的是<strong>值是否相等</strong>。</li>\n<li><code>equals()</code>  ❌ 不适用于基本类型（编译报错）</li>\n</ul>\n<h5 id=\"对于引用类型\"><a class=\"anchor\" href=\"#对于引用类型\">#</a> 🧩 对于引用类型：</h5>\n<ul>\n<li><code>==</code>  比较的是<strong>引用地址</strong>，也就是是否指向同一个对象。</li>\n<li><code>equals()</code>  默认继承自  <code>Object</code>  类，<strong>也是比较引用地址</strong>；<br />\n但许多类（如  <code>String</code> 、 <code>Integer</code> 、 <code>List</code> ）都重写了  <code>equals()</code>  方法，用来比较对象的<strong>内容</strong>是否相等。</li>\n</ul>\n<h5 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> ✅ 示例代码：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//false（不同对象）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true（内容相同）</span></pre></td></tr></table></figure><h4 id=\"追问stringintern-方法的作用是什么它与-有什么关系\"><a class=\"anchor\" href=\"#追问stringintern-方法的作用是什么它与-有什么关系\">#</a> 📌 追问： <code>String.intern()</code>  方法的作用是什么？它与  <code>==</code>  有什么关系？</h4>\n<p><code>String.intern()</code>  是一个<strong> native 方法</strong>，它的作用是：</p>\n<blockquote>\n<p><strong>如果常量池中已经存在与当前字符串内容相同的字符串，则返回该字符串的引用；否则将当前字符串添加到常量池，并返回这个常量池中的引用。</strong></p>\n</blockquote>\n<p>因此，调用  <code>intern()</code>  后，我们可以使用  <code>==</code>  来比较是否为同一对象引用（即是否引用了常量池中的同一字符串）。</p>\n<h5 id=\"示例代码-2\"><a class=\"anchor\" href=\"#示例代码-2\">#</a> 🔍 示例代码：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//false（s1 是堆中对象，s2 是常量池）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//true（s1.intern () 返回常量池引用）</span></pre></td></tr></table></figure><hr />\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 🧾 总结：</h4>\n<ul>\n<li><code>==</code>  比较的是<strong>引用地址</strong>；</li>\n<li><code>equals()</code> （在重写后）比较的是<strong>对象内容</strong>；</li>\n<li><code>intern()</code>  用于<strong>将字符串放入常量池</strong>，从而可以使用  <code>==</code>  来比较字符串内容是否相同（前提是都来自常量池）。</li>\n</ul>\n<h3 id=\"问题2-java-的八种基本数据类型是什么它们各自的默认值是什么\"><a class=\"anchor\" href=\"#问题2-java-的八种基本数据类型是什么它们各自的默认值是什么\">#</a> ❓问题 2： Java 的八种基本数据类型是什么？它们各自的默认值是什么？</h3>\n<p>Java 有 <strong>8 种基本数据类型</strong>，分为<strong>四类</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>占用字节</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1 byte</td>\n<td>0</td>\n<td>整型，-128~127</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2 bytes</td>\n<td>0</td>\n<td>整型</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4 bytes</td>\n<td>0</td>\n<td>整型，默认整型</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8 bytes</td>\n<td>0L</td>\n<td>长整型</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4 bytes</td>\n<td>0.0f</td>\n<td>单精度浮点型</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 bytes</td>\n<td>0.0d</td>\n<td>双精度浮点型</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2 bytes</td>\n<td>'\\u0000'</td>\n<td>字符类型</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>1 bit*</td>\n<td>false</td>\n<td>布尔类型</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>说明：boolean 实际上是由 JVM 实现决定占用空间，通常是 1 byte，而不是真正的 1 bit。</p>\n</blockquote>\n<h4 id=\"追问为什么-char-占两个字节java-中的-char-能表示哪些字符你对-unicode-的理解\"><a class=\"anchor\" href=\"#追问为什么-char-占两个字节java-中的-char-能表示哪些字符你对-unicode-的理解\">#</a> <strong>📌 追问：为什么  <code>char</code>  占两个字节？Java 中的  <code>char</code>  能表示哪些字符？你对 Unicode 的理解？</strong></h4>\n<h5 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> ✨ 分析：</h5>\n<p>请从以下几个方面作答：</p>\n<ul>\n<li><code>char</code>  在 Java 中占多少字节，为什么？</li>\n<li>Java 使用哪种字符集？</li>\n<li>Unicode 和 UTF-8 有什么关系？</li>\n<li>是否能表示中文、表情符等字符？</li>\n</ul>\n<h5 id=\"为什么-char-占两个字节\"><a class=\"anchor\" href=\"#为什么-char-占两个字节\">#</a> 🔹 为什么  <code>char</code>  占两个字节？</h5>\n<p>在 Java 中， <code>char</code>  类型是 <strong>无符号的 16 位整数（2 字节）</strong>，用于表示一个<strong> Unicode 编码的字符</strong>（Unicode 编号范围从  <code>\\u0000</code>  到  <code>\\uFFFF</code> ，即 0~65535）。</p>\n<p>当时设计这样是为了支持国际化，尤其是中文、日文、韩文等字符。</p>\n<hr />\n<h5 id=\"java-中使用什么字符编码\"><a class=\"anchor\" href=\"#java-中使用什么字符编码\">#</a> 🔹 Java 中使用什么字符编码？</h5>\n<p>Java 使用的是 <strong>Unicode 编码体系</strong>，内部使用 <strong>UTF-16</strong> 编码表示字符。</p>\n<ul>\n<li><code>char</code>  表示的是一个 UTF-16 单元（16-bit），所以最多只能直接表示 BMP（Basic Multilingual Plane，基本多文种平面）内的字符（即  <code>\\u0000</code>  ~  <code>\\uFFFF</code> ）；</li>\n<li>如果是扩展字符（如 emoji 表情 😊，Unicode 超过 0xFFFF），则需要两个  <code>char</code>  表示一个字符（称为 <strong>代理对 Surrogate Pair</strong>）。</li>\n</ul>\n<hr />\n<h5 id=\"unicode-vs-utf-8-vs-utf-16\"><a class=\"anchor\" href=\"#unicode-vs-utf-8-vs-utf-16\">#</a> 🔹 Unicode vs UTF-8 vs UTF-16</h5>\n<table>\n<thead>\n<tr>\n<th>编码</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unicode</td>\n<td>一种字符集，给每个字符分配唯一编码编号</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>可变长编码（1~4 字节），常用于网络和文件存储</td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td>可变长编码（2 或 4 字节），Java 内部使用该编码方式</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Java 中使用 UTF-16 单元，每个 char 占 2 字节</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h5 id=\"举个例子\"><a class=\"anchor\" href=\"#举个例子\">#</a> 🔍 举个例子：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'中'</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 占 2 字节，对应 Unicode \\u4E2D</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> emoji <span class=\"token operator\">=</span> <span class=\"token string\">\"😊\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 实际占用两个 char，因为 Unicode 超过 0xFFFF</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>emoji<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 2</span></pre></td></tr></table></figure><hr />\n<h5 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 📌 小结：</h5>\n<ul>\n<li><code>char</code>  是 2 字节，因为使用 UTF-16 单元。</li>\n<li>Java 使用 Unicode 编码，支持中文。</li>\n<li>一个  <code>char</code>  并不等于一个字符，尤其是在 emoji 表情或特殊语言字符时。</li>\n</ul>\n<h3 id=\"问题3string-stringbuilder-和-stringbuffer-有什么区别它们各自的适用场景\"><a class=\"anchor\" href=\"#问题3string-stringbuilder-和-stringbuffer-有什么区别它们各自的适用场景\">#</a> ❓问题 3：String、StringBuilder 和 StringBuffer 有什么区别？它们各自的适用场景？</h3>\n<h4 id=\"string不可变对象\"><a class=\"anchor\" href=\"#string不可变对象\">#</a> 🔹 String（不可变对象）</h4>\n<ul>\n<li>定义： <code>final</code>  类，内容不可变，每次修改都会创建新对象。</li>\n<li>特点：线程安全、效率较低（频繁拼接时容易产生大量中间对象）。</li>\n<li>场景：适用于字符串内容不会频繁变化的场景，如常量、配置参数等。</li>\n</ul>\n<h4 id=\"stringbuilder可变非线程安全\"><a class=\"anchor\" href=\"#stringbuilder可变非线程安全\">#</a> 🔹 StringBuilder（可变，非线程安全）</h4>\n<ul>\n<li>定义：可变字符串容器，底层使用  <code>char[]</code>  实现。</li>\n<li>特点：非线程安全，但性能高。</li>\n<li>场景：<strong>单线程环境</strong>下频繁修改字符串的操作（如拼接、插入等）。</li>\n</ul>\n<h4 id=\"stringbuffer可变线程安全\"><a class=\"anchor\" href=\"#stringbuffer可变线程安全\">#</a> 🔹 StringBuffer（可变，线程安全）</h4>\n<ul>\n<li>定义：与  <code>StringBuilder</code>  类似，但<strong>方法加了 synchronized</strong>，保证线程安全。</li>\n<li>特点：性能比  <code>StringBuilder</code>  略低，但在多线程下更安全。</li>\n<li>场景：<strong>多线程环境</strong>下操作字符串。</li>\n</ul>\n<hr />\n<h4 id=\"性能对比\"><a class=\"anchor\" href=\"#性能对比\">#</a> ✅ 性能对比：</h4>\n<table>\n<thead>\n<tr>\n<th>操作对象</th>\n<th>线程安全</th>\n<th>性能</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>✅ 是</td>\n<td>❌ 低</td>\n<td>不变字符串</td>\n</tr>\n<tr>\n<td>StringBuilder</td>\n<td>❌ 否</td>\n<td>✅ 高</td>\n<td>单线程字符串拼接</td>\n</tr>\n<tr>\n<td>StringBuffer</td>\n<td>✅ 是</td>\n<td>⚠ 中等</td>\n<td>多线程字符串拼接</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"追问进阶你知道-string-为什么是不可变的吗它不可变的好处是什么\"><a class=\"anchor\" href=\"#追问进阶你知道-string-为什么是不可变的吗它不可变的好处是什么\">#</a> 📌 追问（进阶）：你知道 String 为什么是不可变的吗？它不可变的好处是什么？</h4>\n<h5 id=\"为什么-string-是不可变的\"><a class=\"anchor\" href=\"#为什么-string-是不可变的\">#</a> 🔹 为什么 String 是不可变的？</h5>\n<ol>\n<li><strong>底层结构</strong>\n<ul>\n<li><code>String</code>  内部使用  <code>final char[] value</code>  来存储字符；</li>\n<li><code>final</code>  保证引用不可变，整个  <code>String</code>  对象内容不能更改。</li>\n</ul>\n</li>\n<li><strong>类被 final 修饰</strong>\n<ul>\n<li><code>String</code>  是一个  <code>final</code>  类，不能被继承；</li>\n<li>防止子类修改其不可变语义（如重写  <code>hashCode()</code>  等）。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h5 id=\"不可变的好处\"><a class=\"anchor\" href=\"#不可变的好处\">#</a> 🔒 不可变的好处：</h5>\n<ol>\n<li><strong>安全性</strong>\n<ul>\n<li>比如将字符串用于文件路径、网络地址、数据库连接等敏感操作，内容不可更改能避免安全漏洞。</li>\n</ul>\n</li>\n<li><strong>线程安全</strong>\n<ul>\n<li>不需要额外同步，在多线程下天然安全。</li>\n</ul>\n</li>\n<li><strong>缓存优化</strong>\n<ul>\n<li>可以使用字符串常量池（String Pool），提升性能，减少内存开销。</li>\n</ul>\n</li>\n<li><strong>可作为 HashMap 的 key</strong>\n<ul>\n<li>不可变性保证  <code>hashCode</code>  一致性，HashMap 等容器可安全使用。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//abc（未变）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//xbc（新对象）</span></pre></td></tr></table></figure><h5 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> ✅ 小结：</h5>\n<ul>\n<li><code>String</code>  不可变，底层是  <code>final char[]</code> ；</li>\n<li>类本身是  <code>final</code> ，不能被继承；</li>\n<li>不可变带来线程安全、性能优化、可安全作为 key 等多重优势。</li>\n</ul>\n<h3 id=\"问题4java-中是值传递还是引用传递请解释-string-基本类型-对象类型在方法中的传参行为\"><a class=\"anchor\" href=\"#问题4java-中是值传递还是引用传递请解释-string-基本类型-对象类型在方法中的传参行为\">#</a> ❓问题 4：Java 中是值传递还是引用传递？请解释 String、基本类型、对象类型在方法中的传参行为。</h3>\n<p>🔹 Java 中<strong>只有值传递（pass-by-value）</strong>，但根据类型不同表现略有差异：</p>\n<h4 id=\"一-基本数据类型如-int-double-boolean\"><a class=\"anchor\" href=\"#一-基本数据类型如-int-double-boolean\">#</a> 一、基本数据类型（如  <code>int</code> ,  <code>double</code> ,  <code>boolean</code> ）</h4>\n<ul>\n<li>方法调用时，<strong>传的是值的副本</strong>。</li>\n<li>在方法内修改，不会影响原始变量。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 5</span></pre></td></tr></table></figure><h4 id=\"二-引用类型如-string-自定义对象等\"><a class=\"anchor\" href=\"#二-引用类型如-string-自定义对象等\">#</a> 二、引用类型（如  <code>String</code> , 自定义对象等）</h4>\n<ul>\n<li>方法调用时，<strong>传的是对象引用的副本</strong>（仍然是值传递）。</li>\n<li>在方法内通过该引用可以修改对象的属性，但不能改变原始引用本身的指向。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// ✅ 修改了属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ❌ 改变了指向，仅对方法内有效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Lucy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 Jack（不是 Tom）</span></pre></td></tr></table></figure><hr />\n<h4 id=\"三-特殊说明string-是不可变对象\"><a class=\"anchor\" href=\"#三-特殊说明string-是不可变对象\">#</a> 三、特殊说明： <code>String</code>  是不可变对象</h4>\n<p>即使是引用类型，但由于不可变（ <code>final</code>  +  <code>char[]</code> ），在方法中重新赋值是无效的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 Hello</span></pre></td></tr></table></figure><hr />\n<h4 id=\"结论口诀可以背\"><a class=\"anchor\" href=\"#结论口诀可以背\">#</a> ✅ 结论口诀（可以背）：</h4>\n<blockquote>\n<p>Java 全是值传递，<br />\n基本类型传数值，<br />\n引用类型传地址的副本，<br />\n改属性能改，改引用没用！</p>\n</blockquote>\n<h3 id=\"问题4请说一下-java-中的继承和多态是如何实现的能举例说明一下吗\"><a class=\"anchor\" href=\"#问题4请说一下-java-中的继承和多态是如何实现的能举例说明一下吗\">#</a> ❓问题 4：请说一下 Java 中的继承和多态是如何实现的？能举例说明一下吗？</h3>\n<h4 id=\"继承inheritance\"><a class=\"anchor\" href=\"#继承inheritance\">#</a> 🔷 继承（Inheritance）</h4>\n<p>Java 使用  <code>extends</code>  关键字实现类的继承。</p>\n<ul>\n<li>子类继承父类的非私有成员（字段、方法）。</li>\n<li>支持单继承，但类可以实现多个接口。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动物叫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狗叫\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"多态polymorphism\"><a class=\"anchor\" href=\"#多态polymorphism\">#</a> 🔷 多态（Polymorphism）</h4>\n<p>多态分为两类：</p>\n<h5 id=\"1-编译时多态方法重载-overload\"><a class=\"anchor\" href=\"#1-编译时多态方法重载-overload\">#</a> ✅ 1. 编译时多态（方法重载 Overload）：</h5>\n<ul>\n<li>同一个类中，方法名相同，<strong>参数列表不同</strong>（类型或数量不同）；</li>\n<li>与返回值无关；</li>\n<li>属于<strong>静态绑定</strong>，在编译期间确定调用哪个方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"2-运行时多态方法重写-override\"><a class=\"anchor\" href=\"#2-运行时多态方法重写-override\">#</a> ✅ 2. 运行时多态（方法重写 Override）：</h5>\n<ul>\n<li>子类重写父类方法（方法签名必须相同）；</li>\n<li>调用时根据对象的实际类型决定执行哪个方法；</li>\n<li>属于<strong>动态绑定</strong>，在运行时确定。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向上转型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">sound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 输出 “狗叫”，即使 a 是 Animal 类型</span></pre></td></tr></table></figure><blockquote>\n<p>✔ 运行时多态的核心：<strong>父类引用指向子类对象 + 方法重写 + 动态绑定</strong></p>\n</blockquote>\n<hr />\n<h4 id=\"结论口诀\"><a class=\"anchor\" href=\"#结论口诀\">#</a> ✅ 结论口诀：</h4>\n<blockquote>\n<p><strong>继承用 extends，多态靠 override，引用指向父类，执行看子类。</strong></p>\n</blockquote>\n<h4 id=\"补充说明\"><a class=\"anchor\" href=\"#补充说明\">#</a> ❗ 补充说明：</h4>\n<ol>\n<li><strong>方法重载（Overload）</strong> 其实<strong>不是多态的体现</strong>，它是<strong>编译时的多态</strong>（静态绑定）；</li>\n<li>真正的<strong>运行时多态</strong> 是通过<strong>方法重写 + 向上转型 + 动态绑定</strong>实现的。</li>\n</ol>\n<h4 id=\"追问进阶\"><a class=\"anchor\" href=\"#追问进阶\">#</a> 📌 追问（进阶）：</h4>\n<p>你知道 Java 中方法重写时，访问修饰符和异常可以变动吗？比如父类方法抛出异常，子类能否不抛或抛其他的？</p>\n<h5 id=\"1-访问修饰符可以改变但有限制\"><a class=\"anchor\" href=\"#1-访问修饰符可以改变但有限制\">#</a> 🔹1. <strong>访问修饰符可以改变，但有限制：</strong></h5>\n<ul>\n<li>子类重写方法的访问级别<strong>不能更严格</strong>；</li>\n<li>但<strong>可以更宽松</strong>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>父类方法修饰符</th>\n<th>子类允许的修饰符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td><code>public</code></td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td><code>protected</code> ,  <code>public</code></td>\n</tr>\n<tr>\n<td>默认（包访问）</td>\n<td>默认、 <code>protected</code> 、 <code>public</code></td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>❌ 不能被重写（不是重写，是新方法）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h5 id=\"2-异常处理可以改变但有限制\"><a class=\"anchor\" href=\"#2-异常处理可以改变但有限制\">#</a> 🔹2. <strong>异常处理：可以改变，但有限制：</strong></h5>\n<ul>\n<li>父类方法<strong>没有抛出异常</strong>：子类方法<strong>不能抛出检查型异常</strong>（Checked Exception），可以抛运行时异常（Unchecked）；</li>\n<li>父类方法抛出某个<strong>检查型异常</strong>：子类方法只能抛出<strong>相同或更小（子类）范围的异常</strong>；</li>\n<li>子类方法<strong>可以不抛出异常</strong>，即使父类抛出了异常。</li>\n</ul>\n<hr />\n<h5 id=\"举个例子说明\"><a class=\"anchor\" href=\"#举个例子说明\">#</a> ✅ 举个例子说明：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileNotFoundException</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// OK（FileNotFoundException 是 IOException 子类）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// OK（抛运行时异常）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// ❌ 编译错误（父类不抛，子类不能新增 Checked 异常）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"小结口诀\"><a class=\"anchor\" href=\"#小结口诀\">#</a> ✅ 小结口诀：</h5>\n<blockquote>\n<ul>\n<li>访问控制：只能放宽不能收紧；</li>\n<li>异常抛出：只可少不可多，<strong>Checked 异常需兼容</strong>；</li>\n<li><code>private</code>  方法不能重写，它是子类自己的新方法。</li>\n</ul>\n</blockquote>\n<h3 id=\"问题5java-中的异常分为哪两类如何处理它们分别举个例子\"><a class=\"anchor\" href=\"#问题5java-中的异常分为哪两类如何处理它们分别举个例子\">#</a> ❓问题 5：Java 中的异常分为哪两类？如何处理它们？分别举个例子。</h3>\n<h4 id=\"java-中的异常分为两类\"><a class=\"anchor\" href=\"#java-中的异常分为两类\">#</a> 🔷 Java 中的异常分为两类：</h4>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>分类别名</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>CheckedException</strong></td>\n<td>编译时异常（受检异常）</td>\n<td>必须在代码中显式处理（try-catch 或 throws）</td>\n</tr>\n<tr>\n<td><strong>UncheckedException</strong></td>\n<td>运行时异常（非受检异常）</td>\n<td>编译器不会强制处理，程序运行时可能抛出</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"一-checked-exception受检异常\"><a class=\"anchor\" href=\"#一-checked-exception受检异常\">#</a> ✅ 一、Checked Exception（受检异常）</h4>\n<ul>\n<li>继承自  <code>Exception</code> ，但<strong>不包括 RuntimeException</strong>；</li>\n<li>编译器强制要求处理；</li>\n<li>例如：\n<ul>\n<li><code>IOException</code></li>\n<li><code>SQLException</code></li>\n<li><code>ParseException</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可能抛 IOException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"二-unchecked-exception非受检异常\"><a class=\"anchor\" href=\"#二-unchecked-exception非受检异常\">#</a> ✅ 二、Unchecked Exception（非受检异常）</h4>\n<ul>\n<li>继承自  <code>RuntimeException</code> ；</li>\n<li>编译器不要求强制捕获；</li>\n<li>常见如：\n<ul>\n<li><code>NullPointerException</code></li>\n<li><code>ArrayIndexOutOfBoundsException</code></li>\n<li><code>IllegalArgumentException</code></li>\n</ul>\n</li>\n</ul>\n<pre><code>java复制编辑public void test() &#123;\n    String s = null;\n    System.out.println(s.length()); // 运行时抛出 NullPointerException\n&#125;\n</code></pre>\n<hr />\n<h4 id=\"三-异常处理方式\"><a class=\"anchor\" href=\"#三-异常处理方式\">#</a> ✅ 三、异常处理方式</h4>\n<h5 id=\"1-try-catch-finally\"><a class=\"anchor\" href=\"#1-try-catch-finally\">#</a> 1. try-catch-finally</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 有风险的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 异常处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 无论是否异常，最终执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2-throws-关键字方法签名抛出异常\"><a class=\"anchor\" href=\"#2-throws-关键字方法签名抛出异常\">#</a> 2. throws 关键字（方法签名抛出异常）</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 把异常继续往外抛，由调用者处理</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"3-throw-抛出异常对象\"><a class=\"anchor\" href=\"#3-throw-抛出异常对象\">#</a> 3. throw 抛出异常对象</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数非法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"小结口诀-2\"><a class=\"anchor\" href=\"#小结口诀-2\">#</a> ✅ 小结口诀：</h4>\n<blockquote>\n<ul>\n<li>Checked 必须处理，Unchecked 看你愿不愿意；</li>\n<li>try-catch 用于捕，throws 把锅往外推；</li>\n<li>finally 永远执行（除非  <code>System.exit(0)</code> ）。</li>\n</ul>\n</blockquote>\n<hr />\n<h4 id=\"追问\"><a class=\"anchor\" href=\"#追问\">#</a> 📌 追问：</h4>\n<p>你知道 finally 中 return 会覆盖 try 或 catch 中的 return 吗？是否继续？</p>\n<h5 id=\"finally-的执行原则\"><a class=\"anchor\" href=\"#finally-的执行原则\">#</a> 🔹  <code>finally</code>  的执行原则：</h5>\n<ul>\n<li>无论是否发生异常， <code>finally</code>  块都会执行；</li>\n<li>如果  <code>try</code>  或  <code>catch</code>  中有  <code>return</code> ，而  <code>finally</code>  也有  <code>return</code> ，<strong>最终返回的是  <code>finally</code>  中的值</strong>；</li>\n<li>如果  <code>finally</code>  中没有  <code>return</code> ，则执行完  <code>finally</code>  后仍返回  <code>try</code>  或  <code>catch</code>  中的值；</li>\n<li><code>System.exit(0)</code>  会直接终止 JVM， <code>finally</code>  不会被执行。</li>\n</ul>\n<hr />\n<h5 id=\"示例代码-3\"><a class=\"anchor\" href=\"#示例代码-3\">#</a> ✅ 示例代码：</h5>\n<h6 id=\"情况1finally-无-return不影响返回值\"><a class=\"anchor\" href=\"#情况1finally-无-return不影响返回值\">#</a> 🎯 情况 1：finally 无 return，不影响返回值</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally 执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 输出：finally 执行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回：1</span></pre></td></tr></table></figure><h6 id=\"情况2finally-有-return会覆盖-try-的-return\"><a class=\"anchor\" href=\"#情况2finally-有-return会覆盖-try-的-return\">#</a> 🎯 情况 2：finally 有 return，会覆盖 try 的 return</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 返回：2（覆盖了 try 的 return）</span></pre></td></tr></table></figure><h6 id=\"情况3systemexit\"><a class=\"anchor\" href=\"#情况3systemexit\">#</a> 🎯 情况 3：System.exit ()</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// JVM 终止</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"小结口诀-3\"><a class=\"anchor\" href=\"#小结口诀-3\">#</a> ✅ 小结口诀：</h5>\n<blockquote>\n<p>finally 永远会执行，<br />\n有 return 就把结果替，<br />\ntry catch 返回全作废，<br />\nexit 一出谁都不配。</p>\n</blockquote>\n<h3 id=\"问题6arraylist-和-linkedlist-有哪些区别它们各自的适用场景是什么\"><a class=\"anchor\" href=\"#问题6arraylist-和-linkedlist-有哪些区别它们各自的适用场景是什么\">#</a> ❓问题 6：ArrayList 和 LinkedList 有哪些区别？它们各自的适用场景是什么？</h3>\n<h4 id=\"1-arraylist\"><a class=\"anchor\" href=\"#1-arraylist\">#</a> 🔹 1. ArrayList</h4>\n<ul>\n<li><strong>底层结构</strong>：动态数组（Object []）</li>\n<li><strong>优点</strong>：\n<ul>\n<li>支持快速随机访问（O (1)）</li>\n<li>查询性能高</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：\n<ul>\n<li>插入 / 删除效率低（中间位置会整体移动元素）</li>\n<li>扩容有一定性能开销（每次扩容为原来的 1.5 倍）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-linkedlist\"><a class=\"anchor\" href=\"#2-linkedlist\">#</a> 🔹 2. LinkedList</h4>\n<ul>\n<li><strong>底层结构</strong>：双向链表（每个节点有 prev/next 指针）</li>\n<li><strong>优点</strong>：\n<ul>\n<li>插入 / 删除性能高（只需改变前后指针）</li>\n</ul>\n</li>\n<li><strong>缺点</strong>：\n<ul>\n<li>不支持随机访问，查询效率低（O (n)）</li>\n<li>占用内存较大（需要额外存储指针）</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"3-适用场景对比\"><a class=\"anchor\" href=\"#3-适用场景对比\">#</a> ✅ 3. 适用场景对比</h4>\n<table>\n<thead>\n<tr>\n<th>场景类型</th>\n<th>ArrayList</th>\n<th>LinkedList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>频繁读 / 查询</td>\n<td>✅ 非常适合（O (1)）</td>\n<td>❌ 慢（O (n)）</td>\n</tr>\n<tr>\n<td>频繁增删（中间）</td>\n<td>❌ 需要元素移动</td>\n<td>✅ 只改指针</td>\n</tr>\n<tr>\n<td>随机访问</td>\n<td>✅ 快</td>\n<td>❌ 慢</td>\n</tr>\n<tr>\n<td>内存占用</td>\n<td>更省</td>\n<td>更高（额外指针）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"举个例子-2\"><a class=\"anchor\" href=\"#举个例子-2\">#</a> ✅ 举个例子：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> linkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 快</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>linkedList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 慢（要从头或尾一个个遍历）</span></pre></td></tr></table></figure><h4 id=\"补充细节\"><a class=\"anchor\" href=\"#补充细节\">#</a> 📌 补充细节：</h4>\n<ul>\n<li><strong>线程安全性</strong>：两者都不是线程安全的，可以使用  <code>Collections.synchronizedList()</code>  包装；</li>\n<li><strong>插入性能对比</strong>：ArrayList 在尾部添加性能也很高，但在中间插入时就不如 LinkedList。</li>\n</ul>\n<hr />\n<h4 id=\"小结口诀-4\"><a class=\"anchor\" href=\"#小结口诀-4\">#</a> ✅ 小结口诀：</h4>\n<blockquote>\n<p>ArrayList 查找快，LinkedList 插入佳，<br />\n查询随机选 Array，增删频繁用 Link，<br />\n两者都不线程安，需包装才万全。</p>\n</blockquote>\n<h4 id=\"追问arraylist-的扩容机制具体是怎么实现的初始容量是多少\"><a class=\"anchor\" href=\"#追问arraylist-的扩容机制具体是怎么实现的初始容量是多少\">#</a> 📌 追问：ArrayList 的扩容机制具体是怎么实现的？初始容量是多少？</h4>\n<h5 id=\"1-默认初始容量是多少\"><a class=\"anchor\" href=\"#1-默认初始容量是多少\">#</a> 🔹 1. 默认初始容量是多少？</h5>\n<ul>\n<li>\n<p><strong>JDK 1.8 开始</strong>， <code>ArrayList</code>  的初始容量为 <strong>0</strong>，但<strong>第一次添加元素时自动扩容为 10</strong>；</p>\n</li>\n<li>\n<p>这是为了避免创建不必要的数组，提高性能；</p>\n</li>\n<li>\n<p>相关源码字段：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<hr />\n<h5 id=\"2-扩容触发条件\"><a class=\"anchor\" href=\"#2-扩容触发条件\">#</a> 🔹 2. 扩容触发条件</h5>\n<p>当调用  <code>add()</code>  方法插入元素时，如果当前元素个数已经达到数组容量上限，就会触发扩容。</p>\n<hr />\n<h5 id=\"3-扩容机制增长规则\"><a class=\"anchor\" href=\"#3-扩容机制增长规则\">#</a> 🔹 3. 扩容机制（增长规则）</h5>\n<ul>\n<li>\n<p>从 JDK 1.8 开始，<strong>扩容策略为原容量的 1.5 倍</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 即 oldCapacity * 1.5</span></pre></td></tr></table></figure></li>\n<li>\n<p>比如：</p>\n<ul>\n<li>容量 10 -&gt; 扩容后为 15</li>\n<li>容量 15 -&gt; 扩容后为 22</li>\n</ul>\n</li>\n<li>\n<p>源码位置： <code>ArrayList.grow(int minCapacity)</code></p>\n</li>\n</ul>\n<hr />\n<h5 id=\"4-扩容代价性能影响\"><a class=\"anchor\" href=\"#4-扩容代价性能影响\">#</a> 🔹 4. 扩容代价（性能影响）</h5>\n<p>扩容时会：</p>\n<ul>\n<li>创建一个更大的新数组；</li>\n<li>将原数组中的所有元素 <strong>使用  <code>System.arraycopy()</code>  拷贝</strong> 到新数组；</li>\n<li>所以扩容操作的<strong>时间复杂度是 O (n)</strong>，在大数据量下性能开销较大；</li>\n<li>实际项目中如果可预估数据量，建议<strong>提前指定初始容量</strong>以避免频繁扩容。</li>\n</ul>\n<hr />\n<h5 id=\"小结口诀-5\"><a class=\"anchor\" href=\"#小结口诀-5\">#</a> ✅ 小结口诀：</h5>\n<blockquote>\n<p>初始容量默认十，<br />\n满了扩容乘一五；<br />\ngrow 方法来扩张，<br />\n拷贝迁移代价高。</p>\n</blockquote>\n<h3 id=\"问题7hashmap-的底层实现原理是什么jdk-18-做了哪些优化\"><a class=\"anchor\" href=\"#问题7hashmap-的底层实现原理是什么jdk-18-做了哪些优化\">#</a> ❓问题 7：HashMap 的底层实现原理是什么？JDK 1.8 做了哪些优化？</h3>\n<h4 id=\"一-hashmap-的底层结构变化\"><a class=\"anchor\" href=\"#一-hashmap-的底层结构变化\">#</a> 🔷 一、HashMap 的底层结构变化</h4>\n<h5 id=\"jdk-17-及以前\"><a class=\"anchor\" href=\"#jdk-17-及以前\">#</a> JDK 1.7 及以前：</h5>\n<ul>\n<li><strong>底层结构：数组 + 链表</strong></li>\n<li>每个桶（bucket）是一个链表，链表中的每个节点是一个 Entry 对象，包含  <code>key</code> ,  <code>value</code> ,  <code>hash</code> ,  <code>next</code></li>\n<li>发生哈希冲突时，多个 Entry 以链表形式挂载到同一个数组索引下</li>\n</ul>\n<h5 id=\"jdk-18-之后\"><a class=\"anchor\" href=\"#jdk-18-之后\">#</a> JDK 1.8 之后：</h5>\n<ul>\n<li><strong>底层结构：数组 + 链表 + 红黑树</strong></li>\n<li>当单个桶中的链表长度超过阈值（默认是 8），并且数组长度 ≥ 64 时，链表会被转换为 <strong>红黑树</strong></li>\n<li>红黑树查询效率为 O (log n)，提高了性能</li>\n</ul>\n<hr />\n<h4 id=\"二-核心成员结构源码层面\"><a class=\"anchor\" href=\"#二-核心成员结构源码层面\">#</a> 🔷 二、核心成员结构（源码层面）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">transient</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组，默认初始容量 16</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 链表转红黑树的阈值</span></pre></td></tr></table></figure><ul>\n<li>\n<p>Node 是 Entry 的替代类，结构基本一致；</p>\n</li>\n<li>\n<p>put 时先计算 hash 值，定位数组索引；</p>\n<ul>\n<li>\n<p>如果当前位置为空，直接插入；</p>\n</li>\n<li>\n<p>如果不为空（发生冲突），则：</p>\n<ul>\n<li>链表中遍历 key 是否已存在；</li>\n<li>如果链表长度超过 TREEIFY_THRESHOLD（8），并且 table.length ≥ 64，则转为红黑树。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"三-hashmap-的主要优化jdk-18\"><a class=\"anchor\" href=\"#三-hashmap-的主要优化jdk-18\">#</a> 🔷 三、HashMap 的主要优化（JDK 1.8）</h4>\n<table>\n<thead>\n<tr>\n<th>优化点</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>红黑树引入</td>\n<td>冲突严重时，链表结构变为红黑树，查询更快（O (n)→O (logn))</td>\n</tr>\n<tr>\n<td>延迟初始化</td>\n<td>table 数组不在构造函数中立即分配，而是在首次使用时初始化（节省内存）</td>\n</tr>\n<tr>\n<td>hash 计算优化</td>\n<td>使用扰动函数  <code>hash(key.hashCode())</code>  减少冲突</td>\n</tr>\n<tr>\n<td>节点结构变化</td>\n<td><code>Entry</code>  改为  <code>Node</code> ，更通用、清晰</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"小结口诀-6\"><a class=\"anchor\" href=\"#小结口诀-6\">#</a> ✅ 小结口诀：</h4>\n<blockquote>\n<p>HashMap 数组链表挂，<br />\n冲突一多树来刷；<br />\n链长八、容量满，<br />\n红黑上阵效率大。<br />\n七改八，一变多，<br />\nJDK8 才是红黑家。</p>\n</blockquote>\n<h4 id=\"追问hashmap-是线程安全的吗并发场景下会出现什么问题如何解决\"><a class=\"anchor\" href=\"#追问hashmap-是线程安全的吗并发场景下会出现什么问题如何解决\">#</a> 📌追问：HashMap 是线程安全的吗？并发场景下会出现什么问题？如何解决？</h4>\n<h5 id=\"1-hashmap-是线程安全的吗\"><a class=\"anchor\" href=\"#1-hashmap-是线程安全的吗\">#</a> 🔷 1. HashMap 是线程安全的吗？</h5>\n<p>❌ <strong>不是线程安全的。</strong></p>\n<ul>\n<li>多线程环境下同时调用  <code>put()</code> 、 <code>resize()</code>  等方法时会引发数据不一致、死循环等问题；</li>\n<li>JDK 1.7 曾出现链表形成<strong>环形结构</strong>，导致死循环（CPU 100%）；</li>\n</ul>\n<hr />\n<h5 id=\"2-并发情况下的问题\"><a class=\"anchor\" href=\"#2-并发情况下的问题\">#</a> 🔷 2. 并发情况下的问题：</h5>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据丢失</td>\n<td>多个线程同时 put，后写入的会覆盖先写的值</td>\n</tr>\n<tr>\n<td>数据覆盖</td>\n<td>Hash 冲突时覆盖已有节点</td>\n</tr>\n<tr>\n<td>死循环（JDK 1.7）</td>\n<td>多线程扩容时链表节点移动顺序不一致，可能形成环链表，导致 get () 死循环</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h5 id=\"3-解决方案\"><a class=\"anchor\" href=\"#3-解决方案\">#</a> 🔷 3. 解决方案：</h5>\n<h6 id=\"方式一使用-collectionssynchronizedmapmap\"><a class=\"anchor\" href=\"#方式一使用-collectionssynchronizedmapmap\">#</a> ✅ 方式一：使用 <strong> <code>Collections.synchronizedMap(Map)</code> </strong></h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>简单线程安全封装，但效率较低，所有操作加锁</li>\n</ul>\n<h6 id=\"方式二使用-concurrenthashmap\"><a class=\"anchor\" href=\"#方式二使用-concurrenthashmap\">#</a> ✅ 方式二：使用 <strong> <code>ConcurrentHashMap</code> </strong></h6>\n<ul>\n<li>是 JDK 提供的线程安全的哈希表</li>\n<li>适用于高并发读写场景</li>\n</ul>\n<hr />\n<h5 id=\"4-concurrenthashmap-的底层原理以-jdk-18-为例\"><a class=\"anchor\" href=\"#4-concurrenthashmap-的底层原理以-jdk-18-为例\">#</a> 🔷 4.  <code>ConcurrentHashMap</code>  的底层原理（以 JDK 1.8 为例）：</h5>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分段锁机制废弃</td>\n<td>不再使用 JDK 1.7 的 Segment 分段锁结构</td>\n</tr>\n<tr>\n<td>采用 <strong>CAS + synchronized</strong></td>\n<td>保证线程安全， <code>putVal()</code>  用 synchronized 锁住桶节点</td>\n</tr>\n<tr>\n<td>红黑树优化</td>\n<td>与 HashMap 一样，链表长度超过 8 转为红黑树</td>\n</tr>\n<tr>\n<td>并发扩容机制</td>\n<td>多线程协作扩容，提高效率</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h5 id=\"小结口诀-7\"><a class=\"anchor\" href=\"#小结口诀-7\">#</a> ✅ 小结口诀：</h5>\n<blockquote>\n<p>HashMap 并发不保险，死循环卡 CPU；<br />\n覆盖丢失都可能，线程安全用 Concurrent；<br />\nCAS 再加 S 锁，性能线程都保障。</p>\n</blockquote>\n<h5 id=\"衍生追问高级面试你知道-concurrenthashmap-为什么不能用来做-count-累加操作吗它是线程安全的为什么-还是不安全\"><a class=\"anchor\" href=\"#衍生追问高级面试你知道-concurrenthashmap-为什么不能用来做-count-累加操作吗它是线程安全的为什么-还是不安全\">#</a> 📌 衍生追问（高级面试）：你知道 ConcurrentHashMap 为什么不能用来做 count++ 累加操作吗？它是线程安全的，为什么 ++ 还是不安全？</h5>\n<p>虽然 <strong>ConcurrentHashMap 的 put/get 操作是线程安全的</strong>，但  <code>count++</code>  并不是一个原子操作，依然<strong>存在竞态条件</strong>。</p>\n<hr />\n<h6 id=\"原因count-并不是原子操作它分三步\"><a class=\"anchor\" href=\"#原因count-并不是原子操作它分三步\">#</a> 🔷 原因： <code>count++</code>  并不是原子操作，它分三步：</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于：</p>\n<ol>\n<li>读取旧值： <code>int old = map.get(&quot;key&quot;)</code></li>\n<li>计算新值： <code>int newVal = old + 1</code></li>\n<li>写入新值： <code>map.put(&quot;key&quot;, newVal)</code></li>\n</ol>\n<p>如果多个线程同时执行，会发生如下问题：</p>\n<ul>\n<li>都读取到相同的旧值；</li>\n<li>分别加 1 得到相同的新值；</li>\n<li>最终结果被覆盖，<strong>增加的次数比实际少</strong>，即出现 “丢更新”。</li>\n</ul>\n<hr />\n<h6 id=\"正确做法\"><a class=\"anchor\" href=\"#正确做法\">#</a> 🔷 正确做法 ✅：</h6>\n<p>方式 1：使用  <code>AtomicInteger</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原子自增，线程安全</span></pre></td></tr></table></figure><blockquote>\n<p>✅ 这是最推荐的做法，原子性强、性能好。</p>\n</blockquote>\n<hr />\n<p>方式 2：使用  <code>compute()</code>  方法（JDK8+）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>compute 内部加锁处理，保证原子性；</li>\n<li>更适合做复杂的聚合操作。</li>\n</ul>\n<hr />\n<h6 id=\"小结口诀-8\"><a class=\"anchor\" href=\"#小结口诀-8\">#</a> ✅ 小结口诀：</h6>\n<blockquote>\n<p>Map 是线程安全，操作不等于原子；<br />\n三步变一步，才是并发王道；<br />\n要加就用 Atomic，要聚就用 compute。</p>\n</blockquote>\n<h3 id=\"问题8set-是如何保证元素不重复的hashset-的底层实现原理是什么\"><a class=\"anchor\" href=\"#问题8set-是如何保证元素不重复的hashset-的底层实现原理是什么\">#</a> ❓问题 8：Set 是如何保证元素不重复的？HashSet 的底层实现原理是什么？</h3>\n<h4 id=\"1-set-是如何保证元素不重复的\"><a class=\"anchor\" href=\"#1-set-是如何保证元素不重复的\">#</a> 🔷 1. Set 是如何保证元素不重复的？</h4>\n<p>在 Java 中：</p>\n<ul>\n<li><code>Set</code>  是一个接口，其常见实现类如  <code>HashSet</code> 、 <code>TreeSet</code> 、 <code>LinkedHashSet</code> ；</li>\n<li>它的核心特性是：<strong>不允许元素重复</strong>；</li>\n<li>实现去重的关键，是依赖元素的  <code>hashCode()</code>  和  <code>equals()</code>  方法。</li>\n</ul>\n<hr />\n<h4 id=\"2-hashset-的底层原理\"><a class=\"anchor\" href=\"#2-hashset-的底层原理\">#</a> 🔷 2. HashSet 的底层原理：</h4>\n<h5 id=\"hashset-底层其实就是一个-hashmap\"><a class=\"anchor\" href=\"#hashset-底层其实就是一个-hashmap\">#</a> ✅ HashSet 底层其实就是一个  <code>HashMap</code></h5>\n<pre><code>java复制编辑private transient HashMap&lt;E,Object&gt; map;\nprivate static final Object PRESENT = new Object(); // 仅用作占位符\n</code></pre>\n<ul>\n<li>\n<p>当你执行  <code>hashSet.add(e)</code>  时，其实等价于：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>所以元素是否重复，取决于：</p>\n<ul>\n<li><code>e.hashCode()</code>  是否一样；</li>\n<li>如果一样，再调用  <code>e.equals()</code>  判断是否相等。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> ⚠ 注意：</h5>\n<ul>\n<li>如果你自定义对象放入  <code>HashSet</code> ，<strong>一定要重写  <code>equals()</code>  和  <code>hashCode()</code>  方法</strong>；</li>\n<li>否则可能出现 “逻辑重复但实际不重复” 的情况。</li>\n</ul>\n<hr />\n<h4 id=\"3-hashset-插入过程简述\"><a class=\"anchor\" href=\"#3-hashset-插入过程简述\">#</a> 🔷 3. HashSet 插入过程简述：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hashSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> → </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    element<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> → </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        定位桶 → </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 比较 → </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                不存在：加入</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                存在：忽略（<span class=\"token class-name\">Set</span> 不允许重复）</pre></td></tr></table></figure><hr />\n<h4 id=\"举个例子-3\"><a class=\"anchor\" href=\"#举个例子-3\">#</a> ✅ 举个例子：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第二次添加会被忽略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 1</span></pre></td></tr></table></figure><hr />\n<h4 id=\"小结口诀-9\"><a class=\"anchor\" href=\"#小结口诀-9\">#</a> ✅ 小结口诀：</h4>\n<blockquote>\n<p>HashSet 本质 Map，值用哨兵 PRESENT；<br />\n判重复靠 hash + equals，<br />\n自定义对象别忘了重写方法！</p>\n</blockquote>\n<h4 id=\"追问treeset-是如何实现去重和排序的底层用的是什么结构\"><a class=\"anchor\" href=\"#追问treeset-是如何实现去重和排序的底层用的是什么结构\">#</a> 📌 追问：TreeSet 是如何实现去重和排序的？底层用的是什么结构？</h4>\n<h5 id=\"1-treeset-是什么\"><a class=\"anchor\" href=\"#1-treeset-是什么\">#</a> 🔷 1. TreeSet 是什么？</h5>\n<ul>\n<li><code>TreeSet</code>  是  <code>Set</code>  接口的实现类；</li>\n<li>它的特点是：\n<ul>\n<li><strong>元素自动排序（默认升序）</strong></li>\n<li><strong>不允许重复元素</strong></li>\n<li>查询、插入、删除都是 <strong>O(log n)</strong> 的效率</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-treeset-的底层结构\"><a class=\"anchor\" href=\"#2-treeset-的底层结构\">#</a> 🔷 2. TreeSet 的底层结构：</h5>\n<p>TreeSet 的底层是基于 <strong> <code>TreeMap</code>  实现的红黑树（Red-Black Tree）</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">NavigableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>添加元素： <code>add(e)</code>  实际上调用的是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>因此，TreeSet 的本质是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<hr />\n<h5 id=\"3-排序-去重的依据\"><a class=\"anchor\" href=\"#3-排序-去重的依据\">#</a> 🔷 3. 排序 &amp; 去重的依据</h5>\n<h6 id=\"默认排序\"><a class=\"anchor\" href=\"#默认排序\">#</a> 默认排序：</h6>\n<ul>\n<li>元素必须实现  <code>Comparable</code>  接口，重写  <code>compareTo()</code>  方法；</li>\n<li>如果元素无法比较（没有实现 Comparable），则会抛出  <code>ClassCastException</code> 。</li>\n</ul>\n<h6 id=\"自定义排序\"><a class=\"anchor\" href=\"#自定义排序\">#</a> 自定义排序：</h6>\n<ul>\n<li>\n<p>可以在构造 TreeSet 时传入  <code>Comparator</code>  比较器：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"去重的依据\"><a class=\"anchor\" href=\"#去重的依据\">#</a> 去重的依据：</h6>\n<ul>\n<li><strong>不是  <code>equals()</code>  和  <code>hashCode()</code> ，而是  <code>compareTo()</code>  或  <code>Comparator.compare()</code>  的返回值是否为 0</strong>；</li>\n<li>如果返回 0，则认为是重复元素，<strong>不会插入</strong>。</li>\n</ul>\n<hr />\n<h5 id=\"举个例子-4\"><a class=\"anchor\" href=\"#举个例子-4\">#</a> ✅ 举个例子：</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不会加入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3]，自动排序 + 去重</span></pre></td></tr></table></figure><hr />\n<h5 id=\"小结口诀-10\"><a class=\"anchor\" href=\"#小结口诀-10\">#</a> ✅ 小结口诀：</h5>\n<blockquote>\n<p>TreeSet 底层树，红黑排序取；<br />\n可比必实现 Comparable，自定就传 Comparator；<br />\n判重复靠 compare，不是 equals 或 hashCode。</p>\n</blockquote>\n<h5 id=\"衍生追问你能说说-hashset-linkedhashset-和-treeset-的区别吗三者对比适用场景是什么\"><a class=\"anchor\" href=\"#衍生追问你能说说-hashset-linkedhashset-和-treeset-的区别吗三者对比适用场景是什么\">#</a> 📌 衍生追问：你能说说  <code>HashSet</code> 、 <code>LinkedHashSet</code>  和  <code>TreeSet</code>  的区别吗？三者对比适用场景是什么？</h5>\n<h6 id=\"hashset-vs-linkedhashset-vs-treeset\"><a class=\"anchor\" href=\"#hashset-vs-linkedhashset-vs-treeset\">#</a> ✅ HashSet vs LinkedHashSet vs TreeSet</h6>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>HashSet</code></th>\n<th><code>LinkedHashSet</code></th>\n<th><code>TreeSet</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>底层结构</td>\n<td><code>HashMap</code></td>\n<td><code>HashMap + 双向链表</code></td>\n<td><code>TreeMap（红黑树）</code></td>\n</tr>\n<tr>\n<td>是否有序</td>\n<td>❌ 无序</td>\n<td>✅ 插入顺序</td>\n<td>✅ 自动排序（自然排序或自定义 Comparator）</td>\n</tr>\n<tr>\n<td>是否允许重复</td>\n<td>❌ 不允许</td>\n<td>❌ 不允许</td>\n<td>❌ 不允许</td>\n</tr>\n<tr>\n<td>排序规则</td>\n<td>无</td>\n<td>按插入顺序</td>\n<td>默认按  <code>compareTo()</code> ，也可指定  <code>Comparator</code></td>\n</tr>\n<tr>\n<td>查询效率</td>\n<td>✅ 快（O (1)）</td>\n<td>✅ 快（O (1)）</td>\n<td>⚠ 稍慢（O (log n)）</td>\n</tr>\n<tr>\n<td>插入 / 删除效率</td>\n<td>快</td>\n<td>较快（略低于 HashSet）</td>\n<td>相对较慢</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>一般场景，追求查询性能</td>\n<td>需要保持插入顺序的场景</td>\n<td>需要排序（如字典、排行榜）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h6 id=\"使用建议\"><a class=\"anchor\" href=\"#使用建议\">#</a> ✅ 使用建议：</h6>\n<ul>\n<li><strong>HashSet</strong>：性能最好，用于不关心顺序、只需去重的场景；</li>\n<li><strong>LinkedHashSet</strong>：插入顺序敏感，比如缓存、历史记录；</li>\n<li><strong>TreeSet</strong>：需要排序输出、快速范围查询的场景，如自然排序、分段查找。</li>\n</ul>\n<hr />\n<h6 id=\"举个小例子\"><a class=\"anchor\" href=\"#举个小例子\">#</a> ✅ 举个小例子：</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// [1, 2, 3]（无序）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> linkedSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 2, 1]（插入顺序）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> treeSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// [1, 2, 3]（自然排序）</span></pre></td></tr></table></figure><hr />\n<h6 id=\"小结口诀-11\"><a class=\"anchor\" href=\"#小结口诀-11\">#</a> ✅ 小结口诀：</h6>\n<blockquote>\n<p>HashSet 去重快，顺序我不管；<br />\nLinkedHashSet 不仅快，顺序我记得；<br />\nTreeSet 排序最在行，查找范围选它强。</p>\n</blockquote>\n",
            "tags": [
                "Java",
                "面试",
                "Java",
                "面试",
                "ChatGPT"
            ]
        },
        {
            "id": "http://blog.icoders.club/java-interview-question-02/",
            "url": "http://blog.icoders.club/java-interview-question-02/",
            "title": "Java模拟面试题（2）",
            "date_published": "2025-07-29T06:28:20.000Z",
            "content_html": "<h1 id=\"java-面试模拟系列\"><a class=\"anchor\" href=\"#java-面试模拟系列\">#</a> Java 面试模拟系列 🧠📘</h1>\n<blockquote>\n<p>该系列文档基于真实面试准备过程，通过 ChatGPT 辅助问答，对高频 Java 面试题进行整理与答疑。每篇文档聚焦一个主题，覆盖基础、集合、JVM、并发、网络等模块。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>文章标题</th>\n<th>内容简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td><a href=\"/java-interview-basics-01/\" title=\"Java模拟面试题-基础篇-01\">Java 模拟面试题(基础篇01)</a></td>\n<td>Java 基础知识模拟问答</td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"/java-interview-question-01/\" title=\"Java模拟面试题（1）\">Java 模拟面试题(1)</a></td>\n<td>集合框架、JMM 内存模型等基础进阶题</td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"/java-interview-question-02/\" title=\"Java模拟面试题（2）\">Java 模拟面试题(2)</a></td>\n<td>Java 四种引用类型等进阶题</td>\n</tr>\n<tr>\n<td>......</td>\n<td>🔄 持续更新中🔄 持续更新中</td>\n<td>JVM、并发、Spring 等模块 JVM、并发、Spring 等模块</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>📌 推荐使用场景：</p>\n<ul>\n<li>准备面试前的快速复盘</li>\n<li>学习 Java 各模块的知识要点</li>\n<li>与 ChatGPT 配合自测提问训练</li>\n</ul>\n<p>🚀 持续优化中，欢迎 Star &amp; 分享！</p>\n</blockquote>\n<h2 id=\"第一部分java-基础与进阶\"><a class=\"anchor\" href=\"#第一部分java-基础与进阶\">#</a> 💡第一部分：Java 基础与进阶</h2>\n<h3 id=\"问题1请说一下-java-中的四种引用类型强-软-弱-虚引用它们的作用及使用场景\"><a class=\"anchor\" href=\"#问题1请说一下-java-中的四种引用类型强-软-弱-虚引用它们的作用及使用场景\">#</a> ❓问题 1：请说一下 Java 中的四种引用类型（强、软、弱、虚引用），它们的作用及使用场景？</h3>\n<h4 id=\"1️⃣-强引用strong-reference\"><a class=\"anchor\" href=\"#1️⃣-强引用strong-reference\">#</a> 1️⃣ 强引用（Strong Reference）</h4>\n<p><strong>定义方式：</strong>  <code>Object obj = new Object();</code> <br />\n<strong> 特点：</strong></p>\n<ul>\n<li>默认引用类型。</li>\n<li>只要强引用还在，GC 永远不会回收该对象。</li>\n</ul>\n<p><strong>使用场景：</strong> 大多数场景下使用，普通对象引用。</p>\n<hr />\n<h4 id=\"2️⃣-软引用soft-reference\"><a class=\"anchor\" href=\"#2️⃣-软引用soft-reference\">#</a> 2️⃣ 软引用（Soft Reference）</h4>\n<p><strong>定义方式：</strong>  <code>SoftReference&lt;Object&gt; ref = new SoftReference&lt;&gt;(new Object());</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>内存不足时 GC 会尝试回收它所引用的对象。</li>\n<li>适合做缓存（如图片缓存）。</li>\n</ul>\n<p><strong>使用场景：</strong> 内存敏感型缓存系统，例如浏览器缓存、图片缓存等。</p>\n<hr />\n<h4 id=\"3️⃣-弱引用weak-reference\"><a class=\"anchor\" href=\"#3️⃣-弱引用weak-reference\">#</a> 3️⃣ 弱引用（Weak Reference）</h4>\n<p><strong>定义方式：</strong>  <code>WeakReference&lt;Object&gt; ref = new WeakReference&lt;&gt;(new Object());</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>只要 GC 扫描到，无论内存是否紧张，都会回收。</li>\n<li>一般用于管理非必须的对象，例如 ThreadLocal 的 key 就是弱引用。</li>\n</ul>\n<p><strong>使用场景：</strong> ThreadLocal、Map 中防止内存泄漏的 key 引用等。</p>\n<hr />\n<h4 id=\"4️⃣-虚引用phantom-reference\"><a class=\"anchor\" href=\"#4️⃣-虚引用phantom-reference\">#</a> 4️⃣ 虚引用（Phantom Reference）</h4>\n<p><strong>定义方式：</strong>  <code>PhantomReference&lt;Object&gt; ref = new PhantomReference&lt;&gt;(new Object(), referenceQueue);</code></p>\n<p><strong>特点：</strong></p>\n<ul>\n<li>无法通过引用获取对象。</li>\n<li>必须与  <code>ReferenceQueue</code>  联合使用，GC 后可接收到通知。</li>\n</ul>\n<p><strong>使用场景：</strong> 管理堆外内存，或在对象被 GC 回收后做清理工作。</p>\n<h2 id=\"第二部分jvm\"><a class=\"anchor\" href=\"#第二部分jvm\">#</a> 🧠 <strong>第二部分：JVM</strong></h2>\n<h3 id=\"问题2请你说一说类加载的整个过程包括各个阶段的含义以及什么是双亲委派模型为什么要采用这种模型\"><a class=\"anchor\" href=\"#问题2请你说一说类加载的整个过程包括各个阶段的含义以及什么是双亲委派模型为什么要采用这种模型\">#</a> ❓问题 2：请你说一说类加载的整个过程，包括各个阶段的含义，以及什么是双亲委派模型？为什么要采用这种模型？</h3>\n<h3 id=\"类加载过程7个阶段详解\"><a class=\"anchor\" href=\"#类加载过程7个阶段详解\">#</a> ✅ <strong>类加载过程（7 个阶段）详解：</strong></h3>\n<ol>\n<li><strong>加载（Loading）</strong>\n<ul>\n<li>从 class 文件或其他源中读取字节码，生成对应的  <code>Class</code>  对象。</li>\n<li>这一步会由类加载器完成（如 AppClassLoader）。</li>\n</ul>\n</li>\n<li><strong>验证（Verification）</strong>\n<ul>\n<li>确保字节码合法、安全，例如不会越界、不违反访问权限等。</li>\n</ul>\n</li>\n<li><strong>准备（Preparation）</strong>\n<ul>\n<li>为静态变量分配内存，并设置默认值（不是初始化值）。</li>\n</ul>\n</li>\n<li><strong>解析（Resolution）</strong>\n<ul>\n<li>将常量池中的符号引用（如类名、字段名）替换为直接引用（如内存地址）。</li>\n</ul>\n</li>\n<li><strong>初始化（Initialization）</strong>\n<ul>\n<li>执行类的  <code>&lt;clinit&gt;()</code>  方法：静态变量赋值、静态代码块执行。</li>\n</ul>\n</li>\n<li><strong>使用（Using）</strong>\n<ul>\n<li>正常使用这个类，比如 new 实例、调用方法。</li>\n</ul>\n</li>\n<li><strong>卸载（Unloading）</strong>\n<ul>\n<li>由 GC 回收无用的类，通常只有在自定义类加载器场景下会被卸载。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h3 id=\"双亲委派模型parent-delegation-model\"><a class=\"anchor\" href=\"#双亲委派模型parent-delegation-model\">#</a> ✅ <strong>双亲委派模型（Parent Delegation Model）</strong></h3>\n<p>** 定义：** 类加载器加载类时，优先将请求委派给父加载器，一层层向上直到引导类加载器；如果父加载器无法完成，再由子类加载器自己尝试加载。</p>\n<p><strong>加载顺序：</strong> <code>BootstrapClassLoader（引导类加载器）</code>  →  <code>ExtensionClassLoader（扩展类加载器）</code>  →  <code>AppClassLoader（系统类加载器）</code>  →  <code>自定义加载器</code></p>\n<p><strong>目的与好处：</strong></p>\n<ol>\n<li><strong>避免重复加载，保证唯一性（类隔离）</strong>。</li>\n<li><strong>防止核心类被覆盖或篡改，例如自定义 java.lang.String 就无法加载成功</strong>。</li>\n<li><strong>提升安全性与稳定性</strong>。</li>\n</ol>\n<h2 id=\"第三部分并发编程\"><a class=\"anchor\" href=\"#第三部分并发编程\">#</a> 🔒 <strong>第三部分：并发编程</strong></h2>\n<h3 id=\"问题3请你详细说一下-synchronized-和-reentrantlock-的区别包括它们的实现机制-功能特性和适用场景\"><a class=\"anchor\" href=\"#问题3请你详细说一下-synchronized-和-reentrantlock-的区别包括它们的实现机制-功能特性和适用场景\">#</a> ❓问题 3：请你详细说一下  <code>synchronized</code>  和  <code>ReentrantLock</code>  的区别，包括它们的实现机制、功能特性和适用场景。</h3>\n<h4 id=\"synchronized-vs-reentrantlock-全面对比\"><a class=\"anchor\" href=\"#synchronized-vs-reentrantlock-全面对比\">#</a> ✅  <code>synchronized</code>  vs  <code>ReentrantLock</code>  全面对比</h4>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>synchronized</code></th>\n<th><code>ReentrantLock</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否属于 Java 语法关键字</td>\n<td>是</td>\n<td>否（是一个类，需手动引入）</td>\n</tr>\n<tr>\n<td>实现方式</td>\n<td>JVM 层面实现（通过 monitor 对象）</td>\n<td>JDK 实现（ <code>java.util.concurrent.locks</code>  包）</td>\n</tr>\n<tr>\n<td>可重入性</td>\n<td>✅ 支持</td>\n<td>✅ 支持</td>\n</tr>\n<tr>\n<td>公平锁</td>\n<td>❌ 不支持</td>\n<td>✅ 可选（构造函数传入  <code>true</code>  实现公平锁）</td>\n</tr>\n<tr>\n<td>可中断</td>\n<td>❌ 不支持（不能中断正在等待的线程）</td>\n<td>✅ 支持  <code>lockInterruptibly()</code></td>\n</tr>\n<tr>\n<td>超时获取锁</td>\n<td>❌ 不支持</td>\n<td>✅ 支持  <code>tryLock(long timeout, TimeUnit unit)</code></td>\n</tr>\n<tr>\n<td>读写锁</td>\n<td>❌ 不支持</td>\n<td>✅ 支持  <code>ReentrantReadWriteLock</code></td>\n</tr>\n<tr>\n<td>条件变量</td>\n<td>❌ 只能使用  <code>wait/notify</code></td>\n<td>✅ 使用  <code>Condition</code>  更灵活</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>JDK1.6 以后性能很好，低竞争场景下优化为偏向锁、轻量级锁</td>\n<td>高并发下表现更好（如大量线程抢锁）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"使用建议\"><a class=\"anchor\" href=\"#使用建议\">#</a> 🧠 使用建议：</h4>\n<ul>\n<li><strong>简单同步场景（例如同步方法、代码块）</strong> → 用  <code>synchronized</code> ，简单、稳定、无需手动释放。</li>\n<li><strong>高并发、需要灵活控制（中断、超时、公平性、读写分离等）</strong> → 用  <code>ReentrantLock</code> 。</li>\n</ul>\n<hr />\n<p>✅ 示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//synchronized 示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 临界区代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ReentrantLock 示例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 临界区代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一定要手动释放</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"️-第四部分mysql-索引与优化\"><a class=\"anchor\" href=\"#️-第四部分mysql-索引与优化\">#</a> 🗃️ <strong>第四部分：MySQL 索引与优化</strong></h2>\n<h3 id=\"问题4请你说一说-mysql-中-b-树索引的结构特点为什么-mysql-使用的是-b-树而不是-hash-或-b-树\"><a class=\"anchor\" href=\"#问题4请你说一说-mysql-中-b-树索引的结构特点为什么-mysql-使用的是-b-树而不是-hash-或-b-树\">#</a> ❓问题 4：请你说一说 MySQL 中 B+ 树索引的结构特点，为什么 MySQL 使用的是 B+ 树而不是 Hash 或 B 树？</h3>\n<h4 id=\"1-b树结构特点\"><a class=\"anchor\" href=\"#1-b树结构特点\">#</a> 🔸 1. <strong>B + 树结构特点</strong></h4>\n<ul>\n<li>所有数据都存储在<strong>叶子节点</strong>，非叶子节点只做索引（即只存 key，不存 value）。</li>\n<li>叶子节点之间通过<strong>双向链表</strong>连接，天然支持<strong>范围查询</strong>。</li>\n<li>B + 树的<strong>层级更少</strong>，磁盘访问次数少，I/O 效率更高。</li>\n</ul>\n<hr />\n<h4 id=\"2-为什么不是-hash\"><a class=\"anchor\" href=\"#2-为什么不是-hash\">#</a> 🔸 2. <strong>为什么不是 Hash？</strong></h4>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Hash 索引</th>\n<th>B+ 树索引</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>支持范围查询</td>\n<td>❌ 不支持</td>\n<td>✅ 支持范围、排序查询</td>\n</tr>\n<tr>\n<td>有序性</td>\n<td>❌ 无序</td>\n<td>✅ 有序性好</td>\n</tr>\n<tr>\n<td>空间利用率</td>\n<td>❌ 高冲突时效率下降</td>\n<td>✅ 多路平衡树，效率高</td>\n</tr>\n<tr>\n<td>磁盘友好</td>\n<td>❌ 随机访问</td>\n<td>✅ 顺序访问，减少磁盘 I/O</td>\n</tr>\n</tbody>\n</table>\n<p>结论：<strong>Hash 虽然 O (1)，但无法支持范围查询、排序，非常不适合数据库索引需求。</strong></p>\n<hr />\n<h4 id=\"3-为什么不是-b-树\"><a class=\"anchor\" href=\"#3-为什么不是-b-树\">#</a> 🔸 3. <strong>为什么不是 B 树？</strong></h4>\n<ul>\n<li>B 树每个节点会存储 <strong>key 和 value</strong>，导致节点更大，<strong>磁盘页利用率低</strong>，查询过程中会多次访问磁盘。</li>\n<li>B+ 树只在叶子节点存 value，内部节点只存 key，<strong>更高的扇出（一个节点能存更多 key）</strong>，树更矮，<strong>查询更快</strong>。</li>\n</ul>\n<hr />\n<h4 id=\"4-总结优点\"><a class=\"anchor\" href=\"#4-总结优点\">#</a> 🔸 4. <strong>总结优点：</strong></h4>\n<ul>\n<li>I/O 效率高：多路平衡，扇出大，树高低。</li>\n<li>范围查询友好：叶子节点链表结构。</li>\n<li>支持排序：天然支持  <code>ORDER BY</code>  和范围查询。</li>\n<li>扫描效率高：适合数据库这种基于磁盘的海量数据检索场景。</li>\n</ul>\n<h2 id=\"第五部分spring-核心原理\"><a class=\"anchor\" href=\"#第五部分spring-核心原理\">#</a> 🌱 <strong>第五部分：Spring 核心原理</strong></h2>\n<h3 id=\"问题5请你说一下-spring-bean-的生命周期包括在哪些阶段可以进行扩展如-aware-接口-beanpostprocessor-等另外spring-的-aop-是如何实现的\"><a class=\"anchor\" href=\"#问题5请你说一下-spring-bean-的生命周期包括在哪些阶段可以进行扩展如-aware-接口-beanpostprocessor-等另外spring-的-aop-是如何实现的\">#</a> ❓问题 5：请你说一下 Spring Bean 的生命周期，包括在哪些阶段可以进行扩展（如 Aware 接口、BeanPostProcessor 等）？另外，Spring 的 AOP 是如何实现的？</h3>\n<h4 id=\"一-spring-bean-生命周期完整流程及扩展点\"><a class=\"anchor\" href=\"#一-spring-bean-生命周期完整流程及扩展点\">#</a> ✅ 一、Spring Bean 生命周期完整流程及扩展点</h4>\n<h5 id=\"生命周期-7-大步骤按容器层面梳理\"><a class=\"anchor\" href=\"#生命周期-7-大步骤按容器层面梳理\">#</a> 🌀 生命周期 7 大步骤（按容器层面梳理）：</h5>\n<ol>\n<li><strong>实例化</strong>\n<ul>\n<li>调用构造方法创建对象（通过反射）</li>\n<li>对应扩展点： <code>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</code></li>\n</ul>\n</li>\n<li><strong>属性注入（依赖注入）</strong>\n<ul>\n<li>使用  <code>@Autowired</code> 、 <code>@Value</code>  注入依赖</li>\n<li>扩展点： <code>InstantiationAwareBeanPostProcessor#postProcessProperties</code> 、 <code>postProcessAfterInstantiation</code></li>\n</ul>\n</li>\n<li><strong>Aware 接口回调</strong>\n<ul>\n<li>例如： <code>BeanNameAware</code> 、 <code>ApplicationContextAware</code></li>\n<li>容器注入 Spring 环境信息到 Bean 中</li>\n</ul>\n</li>\n<li><strong>BeanPostProcessor 前置处理</strong>\n<ul>\n<li>调用  <code>postProcessBeforeInitialization</code></li>\n</ul>\n</li>\n<li><strong>初始化阶段</strong>\n<ul>\n<li>执行  <code>@PostConstruct</code> 、 <code>InitializingBean#afterPropertiesSet()</code> 、自定义  <code>init-method</code></li>\n</ul>\n</li>\n<li><strong>BeanPostProcessor 后置处理</strong>\n<ul>\n<li>调用  <code>postProcessAfterInitialization</code> （这个阶段通常会生成代理对象，例如 AOP）</li>\n</ul>\n</li>\n<li><strong>销毁阶段</strong>\n<ul>\n<li>容器关闭前执行： <code>@PreDestroy</code> 、 <code>DisposableBean#destroy()</code> 、自定义  <code>destroy-method</code></li>\n</ul>\n</li>\n</ol>\n<hr />\n<h5 id=\"常见扩展点总结\"><a class=\"anchor\" href=\"#常见扩展点总结\">#</a> 🧩 常见扩展点总结：</h5>\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>扩展接口或注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>实例化前</td>\n<td><code>postProcessBeforeInstantiation()</code></td>\n</tr>\n<tr>\n<td>实例化后</td>\n<td><code>postProcessAfterInstantiation()</code></td>\n</tr>\n<tr>\n<td>属性填充</td>\n<td><code>postProcessProperties()</code></td>\n</tr>\n<tr>\n<td>初始化前</td>\n<td><code>postProcessBeforeInitialization()</code></td>\n</tr>\n<tr>\n<td>初始化后</td>\n<td><code>postProcessAfterInitialization()</code></td>\n</tr>\n<tr>\n<td>初始化逻辑</td>\n<td><code>InitializingBean</code> ,  <code>@PostConstruct</code> ,  <code>init-method</code></td>\n</tr>\n<tr>\n<td>销毁逻辑</td>\n<td><code>DisposableBean</code> ,  <code>@PreDestroy</code> ,  <code>destroy-method</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"二-spring-aop-实现原理\"><a class=\"anchor\" href=\"#二-spring-aop-实现原理\">#</a> ✅ 二、Spring AOP 实现原理</h4>\n<p>Spring AOP 采用的是<strong>代理机制</strong>，主要有两种方式：</p>\n<table>\n<thead>\n<tr>\n<th>代理方式</th>\n<th>适用场景</th>\n<th>原理说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>JDK 动态代理</strong></td>\n<td>如果目标对象实现了接口</td>\n<td>基于  <code>java.lang.reflect.Proxy</code> ，生成代理类，实现接口，并委托调用原始方法</td>\n</tr>\n<tr>\n<td><strong>CGLIB 动态代理</strong></td>\n<td>如果目标对象没有实现接口</td>\n<td>通过继承目标类并重写方法生成代理类，底层基于 ASM 字节码操作框架</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"核心流程概览\"><a class=\"anchor\" href=\"#核心流程概览\">#</a> 🧠 核心流程概览：</h5>\n<ol>\n<li>Bean 初始化时， <code>BeanPostProcessor#postProcessAfterInitialization()</code>  判断是否需要 AOP；</li>\n<li>如果需要，生成一个 <strong>代理对象（Proxy）</strong>；</li>\n<li>方法调用时进入  <code>MethodInterceptor</code> ，执行增强逻辑（如  <code>@Around</code> ,  <code>@Before</code> ,  <code>@After</code> ）；</li>\n<li>再调用原始方法，实现增强功能。</li>\n</ol>\n<h2 id=\"️-第六部分系统设计与高可用架构\"><a class=\"anchor\" href=\"#️-第六部分系统设计与高可用架构\">#</a> 🏗️ <strong>第六部分：系统设计与高可用架构</strong></h2>\n<h3 id=\"问题6请你结合实际项目说一说微服务架构中是如何实现限流-熔断-降级的各自的目的-实现方式以及你使用过的具体方案如-sentinel-hystrix-resilience4j-等\"><a class=\"anchor\" href=\"#问题6请你结合实际项目说一说微服务架构中是如何实现限流-熔断-降级的各自的目的-实现方式以及你使用过的具体方案如-sentinel-hystrix-resilience4j-等\">#</a> ❓问题 6：请你结合实际项目，说一说微服务架构中是如何实现 “限流、熔断、降级” 的？各自的目的、实现方式以及你使用过的具体方案（如 Sentinel、Hystrix、Resilience4j 等）？</h3>\n<h4 id=\"一-限流rate-limiting\"><a class=\"anchor\" href=\"#一-限流rate-limiting\">#</a> 🚦 一、限流（Rate Limiting）</h4>\n<p><strong>目的：</strong><br />\n防止接口瞬时高并发被压垮，保护下游服务资源。</p>\n<p><strong>常见策略：</strong></p>\n<ul>\n<li><strong>固定窗口计数法</strong></li>\n<li><strong>滑动窗口法</strong></li>\n<li><strong>令牌桶算法（常用）</strong></li>\n<li><strong>漏桶算法</strong></li>\n</ul>\n<p><strong>实现方式：</strong></p>\n<ol>\n<li>自定义注解 + AOP + Redis/Guava 缓存计数器</li>\n<li>使用<strong> Sentinel</strong> 设置 QPS、线程数等限流规则</li>\n<li>网关限流（如 Nginx、Spring Cloud Gateway + Redis）</li>\n</ol>\n<hr />\n<h4 id=\"二-熔断circuit-breaker\"><a class=\"anchor\" href=\"#二-熔断circuit-breaker\">#</a> 🔌 二、熔断（Circuit Breaker）</h4>\n<p><strong>目的：</strong><br />\n当下游接口连续失败，主动<strong>切断请求通道</strong>，快速失败，防止雪崩效应。</p>\n<p><strong>核心机制：</strong></p>\n<ul>\n<li><strong>失败次数阈值 + 时间窗口 + 半开状态探活</strong></li>\n<li>熔断后进入 <strong>“休眠”</strong>，到期后尝试请求，如果恢复就关闭熔断器。</li>\n</ul>\n<p><strong>实现方案：</strong></p>\n<ul>\n<li><strong>Hystrix（已废弃）</strong></li>\n<li><strong>Sentinel 熔断规则</strong></li>\n<li><strong>Resilience4j</strong>（轻量、现代化）</li>\n</ul>\n<hr />\n<h4 id=\"️-三-降级fallback\"><a class=\"anchor\" href=\"#️-三-降级fallback\">#</a> ⚙️ 三、降级（Fallback）</h4>\n<p><strong>目的：</strong><br />\n服务不可用或慢响应时，为用户提供<strong>备选方案或默认返回值</strong>，避免系统直接崩溃或页面卡死。</p>\n<p><strong>场景：</strong></p>\n<ul>\n<li>服务调用超时</li>\n<li>接口熔断后自动降级</li>\n<li>后台逻辑失败时优雅退化处理</li>\n</ul>\n<p><strong>实现方式：</strong></p>\n<ul>\n<li>Sentinel： <code>@SentinelResource</code>  注解 +  <code>fallback</code>  方法</li>\n<li>Resilience4j： <code>@CircuitBreaker(name = &quot;...&quot;, fallbackMethod = &quot;...&quot;)</code></li>\n</ul>\n<hr />\n<h4 id=\"️-实战经验举例你可以这样答\"><a class=\"anchor\" href=\"#️-实战经验举例你可以这样答\">#</a> 🛠️ 实战经验举例（你可以这样答）：</h4>\n<blockquote>\n<p>在我们做 HRSaaS 系统时，为了防止批量导入、报表导出等高频接口压垮服务，我们接入了 <strong>Sentinel</strong> 做 QPS 限流，并结合降级处理返回友好的提示。对于调用外部保单系统的接口，我们配置了熔断机制，一旦失败率超过 60% 就熔断，并提供静态保单信息 fallback 返回，保证用户操作流畅。</p>\n</blockquote>\n<h2 id=\"第七部分redis-高级用法\"><a class=\"anchor\" href=\"#第七部分redis-高级用法\">#</a> 🧠 <strong>第七部分：Redis 高级用法</strong></h2>\n<h3 id=\"问题7请你讲一讲-redis-中常见的三大缓存问题缓存穿透-缓存击穿-缓存雪崩以及你在项目中是如何解决它们的\"><a class=\"anchor\" href=\"#问题7请你讲一讲-redis-中常见的三大缓存问题缓存穿透-缓存击穿-缓存雪崩以及你在项目中是如何解决它们的\">#</a> ❓问题 7：请你讲一讲 Redis 中常见的三大缓存问题：<strong>缓存穿透、缓存击穿、缓存雪崩</strong>，以及你在项目中是如何解决它们的？</h3>\n<h4 id=\"1️⃣-缓存穿透\"><a class=\"anchor\" href=\"#1️⃣-缓存穿透\">#</a> 1️⃣ 缓存穿透</h4>\n<p><strong>定义：</strong> 查询一个<strong>数据库中不存在</strong>的数据，缓存没命中，每次都打到数据库。</p>\n<p><strong>常见场景：</strong> 用户恶意请求不存在的 ID，导致缓存永远不命中。</p>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li><strong>布隆过滤器（Bloom Filter）</strong>：提前存储所有可能存在的 key，过滤掉无效请求；</li>\n<li><strong>空值缓存</strong>：将查询不到的结果也写入缓存（如  <code>null</code> ，并设置短 TTL）；</li>\n<li><strong>参数校验</strong>：对 ID 做格式校验、合法性判断，提前拦截。</li>\n</ul>\n<hr />\n<h4 id=\"2️⃣-缓存击穿\"><a class=\"anchor\" href=\"#2️⃣-缓存击穿\">#</a> 2️⃣ 缓存击穿</h4>\n<p><strong>定义：</strong> 热点 key 在过期的一瞬间，大量并发请求打入数据库。</p>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li><strong>互斥锁（Mutex Lock）</strong>：查询数据库前先获取锁，只有一个线程加载，其他线程等待；</li>\n<li><strong>逻辑过期 + 后台异步刷新</strong>：\n<ul>\n<li>缓存中加一个  <code>expireTime</code>  字段；</li>\n<li>过期后仍返回旧值，后台线程异步刷新数据库数据。</li>\n</ul>\n</li>\n</ul>\n<p><strong>项目举例：</strong></p>\n<blockquote>\n<p>在 CRM 系统中，为避免客户详情缓存击穿，我们使用了 Redis + 分布式锁（Redisson），只允许一个线程回源查询，其他线程等待数据加载。</p>\n</blockquote>\n<hr />\n<h4 id=\"3️⃣-缓存雪崩\"><a class=\"anchor\" href=\"#3️⃣-缓存雪崩\">#</a> 3️⃣ 缓存雪崩</h4>\n<p><strong>定义：</strong> 大量缓存同时过期，瞬时大量请求打爆数据库。</p>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li>\n<p><strong>缓存过期时间加随机值</strong>：避免 key 同时过期；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> baseTtl <span class=\"token operator\">+</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>热点数据永久缓存 + 异步更新</strong>：核心数据不设置过期时间；</p>\n</li>\n<li>\n<p><strong>多级缓存（本地 + Redis）</strong>：先查本地缓存（如 Caffeine），再查 Redis，最后数据库；</p>\n</li>\n<li>\n<p><strong>限流降级</strong>：设置限流 / 熔断措施，保护数据库。</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"实战总结可这样说\"><a class=\"anchor\" href=\"#实战总结可这样说\">#</a> 🧰 实战总结可这样说：</h4>\n<blockquote>\n<p>在我负责的 HRSaaS 项目中，为了防止缓存击穿，我们在部分关键接口中引入了 Redisson 分布式锁，防止热点 key 同时过期时大量线程并发回源。针对穿透问题，我们为不存在的数据设置了短 TTL 的空值缓存，并在登录等接口前增加了参数校验。缓存雪崩方面，我们所有缓存过期时间都加了随机数，避免批量失效。</p>\n</blockquote>\n<h2 id=\"第八部分注册中心与一致性\"><a class=\"anchor\" href=\"#第八部分注册中心与一致性\">#</a> 🌐 <strong>第八部分：注册中心与一致性</strong></h2>\n<h3 id=\"问题8请你说一说-nacos-和-eureka-的区别它们分别如何实现服务注册与发现它们之间的一致性模型有何不同如何理解-cap-理论在注册中心中的应用\"><a class=\"anchor\" href=\"#问题8请你说一说-nacos-和-eureka-的区别它们分别如何实现服务注册与发现它们之间的一致性模型有何不同如何理解-cap-理论在注册中心中的应用\">#</a> ❓问题 8：请你说一说 Nacos 和 Eureka 的区别？它们分别如何实现服务注册与发现？它们之间的<strong>一致性模型</strong>有何不同？如何理解 CAP 理论在注册中心中的应用？</h3>\n<h4 id=\"一-nacos-和-eureka-的核心区别\"><a class=\"anchor\" href=\"#一-nacos-和-eureka-的核心区别\">#</a> 🔸一、Nacos 和 Eureka 的核心区别</h4>\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th><strong>Eureka</strong></th>\n<th><strong>Nacos</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所属项目</td>\n<td>Netflix（Spring Cloud）</td>\n<td>阿里巴巴（Spring Cloud Alibaba）</td>\n</tr>\n<tr>\n<td>服务健康检查</td>\n<td>客户端自上报（心跳）</td>\n<td>支持<strong>客户端 + 服务端主动探测（TCP/HTTP）</strong></td>\n</tr>\n<tr>\n<td>数据存储</td>\n<td>内存 + Peer-to-Peer 同步</td>\n<td>支持 AP 模式（集群中基于 Raft 一致性）</td>\n</tr>\n<tr>\n<td>一致性模型</td>\n<td><strong>AP</strong>（可用性 + 分区容忍性）</td>\n<td><strong>AP 默认，也可切换为 CP</strong>（基于 Raft）</td>\n</tr>\n<tr>\n<td>支持配置中心</td>\n<td>❌ 无</td>\n<td>✅ 集成配置中心（一个系统两个功能）</td>\n</tr>\n<tr>\n<td>开发状态</td>\n<td>官方已停止维护</td>\n<td>社区活跃，国内主流</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"二-cap-理论在注册中心中的体现\"><a class=\"anchor\" href=\"#二-cap-理论在注册中心中的体现\">#</a> 🔸二、CAP 理论在注册中心中的体现</h4>\n<p><strong>CAP 理论：</strong></p>\n<ul>\n<li><strong>C 一致性（Consistency）</strong>：数据在多个节点中始终一致；</li>\n<li><strong>A 可用性（Availability）</strong>：每次请求都能获得响应；</li>\n<li><strong>P 分区容忍性（Partition tolerance）</strong>：允许网络分区时系统仍能运行。</li>\n</ul>\n<blockquote>\n<p>在分布式系统中，<strong>CAP 三者不可兼得</strong>，必须牺牲一个。</p>\n</blockquote>\n<hr />\n<h5 id=\"eureka偏向-ap-模型\"><a class=\"anchor\" href=\"#eureka偏向-ap-模型\">#</a> 📌 Eureka：<strong>偏向 AP 模型</strong></h5>\n<ul>\n<li>容忍网络分区（P），保持高可用（A）</li>\n<li><strong>牺牲强一致性</strong>：即使部分节点宕机，注册信息仍可访问</li>\n<li>服务实例下线后有 <strong>90s 的保护期</strong>，这段时间注册中心不立即剔除服务（防止误判）</li>\n</ul>\n<hr />\n<h5 id=\"nacos默认-ap可配置为-cp-模式\"><a class=\"anchor\" href=\"#nacos默认-ap可配置为-cp-模式\">#</a> 📌 Nacos：<strong>默认 AP，可配置为 CP 模式</strong></h5>\n<ul>\n<li>单机或非持久化模式下：AP（可用性优先）</li>\n<li><strong>集群 + 开启持久化模式（如 MySQL）时</strong>：支持 Raft 协议，实现 CP 模式\n<ul>\n<li>多节点之间通过 Raft 投票选主，保证一致性</li>\n</ul>\n</li>\n<li>更灵活：你可以根据业务场景选择强一致还是高可用</li>\n</ul>\n<hr />\n<h4 id=\"项目实战举例你可以这么说\"><a class=\"anchor\" href=\"#项目实战举例你可以这么说\">#</a> 🔍 项目实战举例（你可以这么说）：</h4>\n<blockquote>\n<p>在我参与的 CRM 微服务拆分项目中，早期使用 Eureka 做服务发现，主要为了快速部署、高可用。但随着配置中心需求增加，我们迁移到了 Nacos，并通过开启 Raft + MySQL 模式，保障服务注册数据的一致性和持久性。我们也借助 Nacos 实现了注册 + 配置统一管理，运维效率提升明显。</p>\n</blockquote>\n<h2 id=\"️-第九部分系统设计分布式任务调度设计\"><a class=\"anchor\" href=\"#️-第九部分系统设计分布式任务调度设计\">#</a> ⏱️ <strong>第九部分：系统设计 —— 分布式任务调度设计</strong></h2>\n<h3 id=\"问题9如果让你从零设计一个分布式任务调度系统用于定时任务执行-批处理-自动发薪等你会如何考虑以下几个方面\"><a class=\"anchor\" href=\"#问题9如果让你从零设计一个分布式任务调度系统用于定时任务执行-批处理-自动发薪等你会如何考虑以下几个方面\">#</a> ❓问题 9：如果让你从零设计一个<strong>分布式任务调度系统</strong>（用于定时任务执行、批处理、自动发薪等），你会如何考虑以下几个方面？</h3>\n<h4 id=\"1-任务的时间调度与精度如何保证\"><a class=\"anchor\" href=\"#1-任务的时间调度与精度如何保证\">#</a> 1. 任务的<strong>时间调度与精度</strong>如何保证？</h4>\n<ul>\n<li><strong>Cron 表达式调度：</strong> 类似 Linux crontab，适用于定时执行（如每日发薪、定时统计）。</li>\n<li><strong>延迟任务调度：</strong> 某任务在未来某个时间点执行（如 T+1 审批流程）。</li>\n<li><strong>手动触发 / 依赖触发：</strong> 任务之间支持依赖关系，满足 A 执行后触发 B。</li>\n</ul>\n<p>🔧 <strong>常用调度引擎：</strong></p>\n<ul>\n<li>Quartz（轻量，但单机）</li>\n<li>ElasticJob（支持分片、注册中心）</li>\n<li>XXL-JOB（UI 管理好，任务分布式执行）</li>\n<li>PowerJob（功能强大，支持分布式 + DAG 依赖）</li>\n</ul>\n<h4 id=\"2-如何实现高可用性主备故障切换\"><a class=\"anchor\" href=\"#2-如何实现高可用性主备故障切换\">#</a> 2. 如何实现<strong>高可用性</strong>（主备 / 故障切换）？</h4>\n<ul>\n<li>\n<p><strong>注册中心 + 多节点调度器（Worker）</strong></p>\n<ul>\n<li>通过 Nacos/Zookeeper 注册服务，多个 Worker 实例负载均衡</li>\n</ul>\n</li>\n<li>\n<p><strong>主节点选举（Master）</strong>：如使用数据库或 ZK 实现选主</p>\n</li>\n<li>\n<p>支持 <strong>任务 Failover</strong>：某个 Worker 崩溃，任务自动转移到其他节点</p>\n</li>\n<li>\n<p>状态持久化：任务状态、调度记录写入数据库，容器重启后可恢复</p>\n</li>\n</ul>\n<h4 id=\"3-如何避免任务重复执行或漏执行\"><a class=\"anchor\" href=\"#3-如何避免任务重复执行或漏执行\">#</a> 3. 如何避免<strong>任务重复执行</strong>或<strong>漏执行</strong>？</h4>\n<ul>\n<li><strong>分布式锁</strong>：使用 Redis、Zookeeper 分布式锁确保同一时间只有一个实例执行某任务；</li>\n<li><strong>幂等性设计</strong>：任务本身执行逻辑需幂等（如：相同数据只处理一次）；</li>\n<li><strong>任务日志 + 重试机制</strong>：任务失败可配置重试次数，并记录执行状态，支持告警通知；</li>\n<li><strong>事务支持</strong>：关键步骤要用事务确保数据一致性（如写库 + 发 MQ）</li>\n</ul>\n<h4 id=\"4-如何支持分布式部署-任务分片并发执行\"><a class=\"anchor\" href=\"#4-如何支持分布式部署-任务分片并发执行\">#</a> 4. 如何支持<strong>分布式部署</strong> + <strong>任务分片并发执行</strong>？</h4>\n<blockquote>\n<p><strong>任务分片（Sharding）</strong> = 把一个大任务拆分成多个小任务，由不同节点并行处理。</p>\n</blockquote>\n<ul>\n<li>Worker 启动时从注册中心获取任务分片列表；</li>\n<li>每个分片带有 shardIndex、shardTotal 标识；</li>\n<li>Worker 只执行自己负责的分片；</li>\n<li>支持动态扩容，避免热点 Worker 负载过高。</li>\n</ul>\n<p>🔧 ElasticJob / PowerJob 原生支持任务分片。</p>\n<h4 id=\"5-是否接触过类似的中间件如-xxljob-quartz-elasticjob-powerjob\"><a class=\"anchor\" href=\"#5-是否接触过类似的中间件如-xxljob-quartz-elasticjob-powerjob\">#</a> 5. 是否接触过类似的中间件（如 xxljob、Quartz、ElasticJob、PowerJob）？</h4>\n<blockquote>\n<p>在我们 HRSaaS 系统的发薪模块中，需要定时每天检查企业的工资发放计划，我们基于 XXL-JOB 实现了调度系统，使用 Redis 分布式锁防止重复执行，任务失败后自动告警并支持重试。同时支持多租户并行计算工资明细，通过任务分片按租户并发处理，提升执行效率。</p>\n</blockquote>\n",
            "tags": [
                "Java",
                "面试",
                "Java",
                "面试",
                "ChatGPT"
            ]
        },
        {
            "id": "http://blog.icoders.club/java-interview-question-01/",
            "url": "http://blog.icoders.club/java-interview-question-01/",
            "title": "Java模拟面试题（1）",
            "date_published": "2025-07-28T09:13:17.000Z",
            "content_html": "<h1 id=\"java-面试模拟系列\"><a class=\"anchor\" href=\"#java-面试模拟系列\">#</a> Java 面试模拟系列 🧠📘</h1>\n<blockquote>\n<p>该系列文档基于真实面试准备过程，通过 ChatGPT 辅助问答，对高频 Java 面试题进行整理与答疑。每篇文档聚焦一个主题，覆盖基础、集合、JVM、并发、网络等模块。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>文章标题</th>\n<th>内容简介</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td><a href=\"/java-interview-basics-01/\" title=\"Java模拟面试题-基础篇-01\">Java 模拟面试题(基础篇01)</a></td>\n<td>Java 基础知识模拟问答</td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"/java-interview-question-01/\" title=\"Java模拟面试题（1）\">Java 模拟面试题(1)</a></td>\n<td>集合框架、JMM 内存模型等基础进阶题</td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"/java-interview-question-02/\" title=\"Java模拟面试题（2）\">Java 模拟面试题(2)</a></td>\n<td>Java 四种引用类型等进阶题</td>\n</tr>\n<tr>\n<td>...</td>\n<td>🔄 持续更新中</td>\n<td>JVM、并发、Spring 等模块</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>📌 推荐使用场景：</p>\n<ul>\n<li>准备面试前的快速复盘</li>\n<li>学习 Java 各模块的知识要点</li>\n<li>与 ChatGPT 配合自测提问训练</li>\n</ul>\n<p>🚀 持续优化中，欢迎 Star &amp; 分享！</p>\n</blockquote>\n<h2 id=\"第一部分java-基础与进阶\"><a class=\"anchor\" href=\"#第一部分java-基础与进阶\">#</a> 💡第一部分：Java 基础与进阶</h2>\n<h3 id=\"问题1请简述arraylist-和-linkedlist-的主要区别你在什么场景下会选择用-linkedlist\"><a class=\"anchor\" href=\"#问题1请简述arraylist-和-linkedlist-的主要区别你在什么场景下会选择用-linkedlist\">#</a> ❓问题 1：请简述： <code>ArrayList</code>  和  <code>LinkedList</code>  的主要区别？你在什么场景下会选择用  <code>LinkedList</code> ？</h3>\n<p><strong>答案：</strong></p>\n<ul>\n<li>ArrayList 底层是动态数组，支持快速随机访问（O (1)），插入删除慢（需要移动元素）。</li>\n<li>LinkedList 是双向链表，访问慢（O (n)），插入删除快（只修改指针）。</li>\n<li>两者都非线程安全。</li>\n<li>LinkedList 适合频繁在头尾插入删除，或用作双端队列（Deque），但大部分场景用 ArrayList。ArrayDeque 通常比 LinkedList 性能更好。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>对比维度</th>\n<th>ArrayList</th>\n<th>LinkedList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>底层结构</td>\n<td>动态数组  <code>Object[]</code></td>\n<td>双向链表</td>\n</tr>\n<tr>\n<td>访问性能</td>\n<td><strong>O(1)</strong> 随机访问快</td>\n<td>O (n) 顺序遍历</td>\n</tr>\n<tr>\n<td>插入 / 删除</td>\n<td>末尾插入快，中间插入慢（需移动元素）</td>\n<td>中间插入删除快（修改前后指针）</td>\n</tr>\n<tr>\n<td>内存占用</td>\n<td>紧凑，节省空间</td>\n<td>每个节点额外维护 prev/next，内存开销大</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>都是非线程安全，需外部加锁</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>使用场景</td>\n<td>读多写少</td>\n<td>写多、频繁插入删除中间节点（但几乎不用）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"问题2java异常处理机制\"><a class=\"anchor\" href=\"#问题2java异常处理机制\">#</a> ❓问题 2：Java 异常处理机制？</h3>\n<h4 id=\"1️⃣-异常分类\"><a class=\"anchor\" href=\"#1️⃣-异常分类\">#</a> <strong>1️⃣ 异常分类：</strong></h4>\n<ul>\n<li><strong>Checked Exception（受检异常）</strong>\n<ul>\n<li>继承自  <code>Exception</code> ，编译时必须处理（捕获或抛出），如  <code>IOException</code> 、 <code>SQLException</code> 。</li>\n</ul>\n</li>\n<li><strong>Unchecked Exception（运行时异常）</strong>\n<ul>\n<li>继承自  <code>RuntimeException</code> ，编译时不强制处理，如  <code>NullPointerException</code> 、 <code>IndexOutOfBoundsException</code> 。</li>\n</ul>\n</li>\n<li><strong>Error（错误）</strong>\n<ul>\n<li>JVM 错误，如  <code>OutOfMemoryError</code> 、 <code>StackOverflowError</code> ，一般不捕获。</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"2️⃣-异常捕获和抛出\"><a class=\"anchor\" href=\"#2️⃣-异常捕获和抛出\">#</a> <strong>2️⃣ 异常捕获和抛出：</strong></h4>\n<ul>\n<li>使用  <code>try-catch-finally</code>  捕获异常， <code>finally</code>  块执行清理操作，无论是否异常都会执行。</li>\n<li>使用  <code>throw</code>  抛出异常实例，使用  <code>throws</code>  声明方法可能抛出的异常。</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能抛出异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 清理操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"3️⃣-自定义异常\"><a class=\"anchor\" href=\"#3️⃣-自定义异常\">#</a> <strong>3️⃣ 自定义异常：</strong></h4>\n<ul>\n<li>一般继承  <code>Exception</code> （受检异常）或  <code>RuntimeException</code> （非受检异常）</li>\n<li>推荐添加构造器方便传递异常信息</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> ✅ <strong>总结：</strong></h4>\n<ul>\n<li>异常分受检异常（Exception）、运行时异常（RuntimeException）和错误（Error）。</li>\n<li>用 try-catch-finally 捕获，throw 抛出。</li>\n<li>自定义异常继承 Exception 或 RuntimeException。</li>\n</ul>\n<h4 id=\"简短示范回答\"><a class=\"anchor\" href=\"#简短示范回答\">#</a> ✅ <strong>简短示范回答</strong></h4>\n<blockquote>\n<p>Java 异常分为三类：受检异常（必须捕获或声明抛出）、运行时异常（可选捕获）、错误（一般不捕获）。程序中通过  <code>try-catch-finally</code>  捕获异常， <code>throw</code>  抛出异常。自定义异常一般继承  <code>Exception</code>  或  <code>RuntimeException</code> ，并重写构造方法。</p>\n</blockquote>\n<h2 id=\"第三部分并发编程\"><a class=\"anchor\" href=\"#第三部分并发编程\">#</a> 🔒 <strong>第三部分：并发编程</strong></h2>\n<h3 id=\"问题3你了解-java-的内存模型jmm吗请说一下可见性-有序性和原子性的问题以及-java-是如何通过关键字来解决它们的\"><a class=\"anchor\" href=\"#问题3你了解-java-的内存模型jmm吗请说一下可见性-有序性和原子性的问题以及-java-是如何通过关键字来解决它们的\">#</a> ❓问题 3：你了解 Java 的内存模型（JMM）吗？请说一下可见性、有序性和原子性的问题，以及 Java 是如何通过关键字来解决它们的？</h3>\n<h4 id=\"1️⃣-原子性\"><a class=\"anchor\" href=\"#1️⃣-原子性\">#</a> 1️⃣ 原子性</h4>\n<ul>\n<li><strong>定义</strong>：操作是不可再分的最小单位，中间不会被线程切换打断。</li>\n<li><strong>Java 中如何保证</strong>：\n<ul>\n<li>原始操作如  <code>i++</code>  不是原子性的</li>\n<li>可以使用：\n<ul>\n<li><code>synchronized</code></li>\n<li><code>Lock</code></li>\n<li><code>AtomicInteger</code> （底层用 CAS 实现）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"2️⃣-可见性\"><a class=\"anchor\" href=\"#2️⃣-可见性\">#</a> 2️⃣ 可见性</h4>\n<ul>\n<li><strong>定义</strong>：一个线程对共享变量的修改，<strong>另一个线程能及时看到</strong>。</li>\n<li><strong>Java 提供的可见性保证</strong>：\n<ul>\n<li><code>volatile</code> ：写操作会立刻刷新主内存，读操作直接从主内存读</li>\n<li><code>synchronized</code> ：解锁时会刷新主内存，获取锁会从主内存读取</li>\n<li><code>final</code> ：在构造函数中安全发布对象</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"3️⃣-有序性\"><a class=\"anchor\" href=\"#3️⃣-有序性\">#</a> 3️⃣ 有序性</h4>\n<ul>\n<li><strong>定义</strong>：程序代码的执行顺序是否和编写顺序一致</li>\n<li>Java 编译器和 CPU 会进行指令重排序（为了优化性能）</li>\n<li><strong>Java 如何保证有序性</strong>：\n<ul>\n<li><code>volatile</code> ：禁止指令重排序</li>\n<li><code>synchronized</code>  /  <code>Lock</code> ：建立 happens-before 关系，保证临界区的代码不乱序执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4️⃣答案\"><a class=\"anchor\" href=\"#4️⃣答案\">#</a> 4️⃣<strong>答案：</strong></h4>\n<ul>\n<li>原子性：操作不可分割， <code>synchronized</code> 、 <code>Lock</code> 、 <code>AtomicXXX</code>  保证。</li>\n<li>可见性：一个线程修改，其他线程能立即看到， <code>volatile</code>  和  <code>synchronized</code>  保证。</li>\n<li>有序性：执行顺序按代码顺序或 JMM 保证， <code>volatile</code>  禁止指令重排序， <code>synchronized</code>  建立 happens-before 关系。</li>\n</ul>\n<hr />\n<h3 id=\"问题4volatile-的底层原理及它能保证原子性吗如果不能那你遇到-volatile-i-这样的代码要怎么改\"><a class=\"anchor\" href=\"#问题4volatile-的底层原理及它能保证原子性吗如果不能那你遇到-volatile-i-这样的代码要怎么改\">#</a> ❓问题 4：volatile 的底层原理及它能保证原子性吗？如果不能，那你遇到  <code>volatile i++</code>  这样的代码要怎么改？</h3>\n<h4 id=\"1-volatile-的作用\"><a class=\"anchor\" href=\"#1-volatile-的作用\">#</a> 🔍 1.  <code>volatile</code>  的作用</h4>\n<ul>\n<li><strong>保证可见性</strong>：对变量的写操作，会立刻刷新到主内存，其他线程读操作一定从主内存读取。</li>\n<li><strong>禁止指令重排序</strong>：读写操作不会被 JVM 或 CPU 编译器重排。</li>\n</ul>\n<hr />\n<h4 id=\"2-volatile-的底层原理\"><a class=\"anchor\" href=\"#2-volatile-的底层原理\">#</a> 🧠 2.  <code>volatile</code>  的底层原理</h4>\n<p>在 <strong>JDK 层和 JVM 层</strong>， <code>volatile</code>  的底层实现分为：</p>\n<h4 id=\"java-层\"><a class=\"anchor\" href=\"#java-层\">#</a> ✅ Java 层：</h4>\n<ul>\n<li>被编译为特殊的字节码指令： <code>volatile</code>  修饰字段在字节码中有  <code>volatile</code>  标记。</li>\n</ul>\n<h4 id=\"jvm-层对应-cpu-内存模型\"><a class=\"anchor\" href=\"#jvm-层对应-cpu-内存模型\">#</a> ✅ JVM 层（对应 CPU 内存模型）：</h4>\n<ul>\n<li>会在底层插入 <strong>内存屏障（Memory Barrier）</strong> 指令：\n<ul>\n<li>写操作后插入  <code>StoreStore Barrier</code>  和  <code>StoreLoad Barrier</code> ，保证刷新主内存</li>\n<li>读操作前插入  <code>LoadLoad Barrier</code> ，保证读取的是主内存最新值</li>\n</ul>\n</li>\n</ul>\n<hr />\n<h4 id=\"️-3-为什么-volatile-不能保证原子性\"><a class=\"anchor\" href=\"#️-3-为什么-volatile-不能保证原子性\">#</a> ⚠️ 3. 为什么  <code>volatile</code>  不能保证原子性？</h4>\n<p>举例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>count++</code>  实际执行分为三步：</p>\n<ol>\n<li>读取 count</li>\n<li>+1</li>\n<li>写回 count</li>\n</ol>\n<p>多线程并发执行时，这三个步骤不是原子的，会导致丢数据。</p>\n<hr />\n<h4 id=\"4-正确做法\"><a class=\"anchor\" href=\"#4-正确做法\">#</a> ✅ 4. 正确做法？</h4>\n<p>使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 原子自增</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>底层用的是 <strong>CAS + volatile 变量</strong> 实现原子性 + 可见性。</p>\n<h4 id=\"答案\"><a class=\"anchor\" href=\"#答案\">#</a> <strong>✅ 答案：</strong></h4>\n<ul>\n<li><code>volatile</code>  通过内存屏障保证可见性和禁止重排序。</li>\n<li>不能保证复合操作（如  <code>i++</code> ）的原子性。</li>\n<li>需用  <code>AtomicInteger</code>  或加锁保证原子性。</li>\n</ul>\n<hr />\n<h3 id=\"问题5你了解-java-中的线程池吗请简要说明线程池的-7-个参数含义以及任务提交后的执行流程\"><a class=\"anchor\" href=\"#问题5你了解-java-中的线程池吗请简要说明线程池的-7-个参数含义以及任务提交后的执行流程\">#</a> ❓问题 5：你了解 Java 中的线程池吗？请简要说明线程池的 7 个参数含义，以及任务提交后的执行流程。</h3>\n<h4 id=\"一-线程池的-7-个核心参数来自-threadpoolexecutor-构造函数\"><a class=\"anchor\" href=\"#一-线程池的-7-个核心参数来自-threadpoolexecutor-构造函数\">#</a> ✅ 一、线程池的 7 个核心参数（来自  <code>ThreadPoolExecutor</code>  构造函数）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    corePoolSize<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 核心线程数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    maximumPoolSize<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 最大线程数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    keepAliveTime<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 非核心线程存活时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    unit<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 存活时间单位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    workQueue<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 阻塞队列</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    threadFactory<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 线程工厂（创建线程）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    handler             <span class=\"token comment\">// 拒绝策略</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>corePoolSize</code></td>\n<td>核心线程数，始终保留，哪怕空闲</td>\n</tr>\n<tr>\n<td><code>maximumPoolSize</code></td>\n<td>最大线程数</td>\n</tr>\n<tr>\n<td><code>keepAliveTime</code></td>\n<td>非核心线程的最大空闲时间，超过就销毁</td>\n</tr>\n<tr>\n<td><code>unit</code></td>\n<td>上面时间的单位（秒、毫秒等）</td>\n</tr>\n<tr>\n<td><code>workQueue</code></td>\n<td>用来存放等待执行的任务</td>\n</tr>\n<tr>\n<td><code>threadFactory</code></td>\n<td>用于创建新线程，可自定义线程名等</td>\n</tr>\n<tr>\n<td><code>handler</code></td>\n<td>拒绝策略，线程和队列都满后触发</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"二-任务提交到线程池后会发生什么执行流程\"><a class=\"anchor\" href=\"#二-任务提交到线程池后会发生什么执行流程\">#</a> ✅ 二、任务提交到线程池后会发生什么（执行流程）</h4>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1. 当前线程数 &lt; corePoolSize：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    → 直接创建新线程处理任务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2. 当前线程数 ≥ corePoolSize：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    → 尝试放入工作队列（workQueue）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3. 工作队列满了：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    → 如果线程总数 &lt; maximumPoolSize，则创建新线程执行任务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>4. 如果线程总数 = maximumPoolSize 且队列也满了：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    → 执行拒绝策略（handler）</pre></td></tr></table></figure><hr />\n<h4 id=\"常见阻塞队列workqueue类型\"><a class=\"anchor\" href=\"#常见阻塞队列workqueue类型\">#</a> 🔧 常见阻塞队列（workQueue）类型</h4>\n<table>\n<thead>\n<tr>\n<th>队列类型</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ArrayBlockingQueue</code></td>\n<td>有界队列，FIFO</td>\n</tr>\n<tr>\n<td><code>LinkedBlockingQueue</code></td>\n<td>无界队列（可指定大小），吞吐高</td>\n</tr>\n<tr>\n<td><code>SynchronousQueue</code></td>\n<td>不存储任务，来了就必须被线程处理</td>\n</tr>\n<tr>\n<td><code>PriorityBlockingQueue</code></td>\n<td>按优先级排序处理任务</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"拒绝策略handler\"><a class=\"anchor\" href=\"#拒绝策略handler\">#</a> 🔧 拒绝策略（handler）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RejectedExecutionHandler</span> handler <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>AbortPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认，抛异常</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 其他策略：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">CallerRunsPolicy</span>    <span class=\"token comment\">// 由调用线程执行（慢但不丢）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">DiscardPolicy</span>       <span class=\"token comment\">// 直接丢弃任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">DiscardOldestPolicy</span> <span class=\"token comment\">// 丢最旧的，尝试提交新任务</span></pre></td></tr></table></figure><hr />\n<h4 id=\"实际应用举例建议你在项目中也封装一份\"><a class=\"anchor\" href=\"#实际应用举例建议你在项目中也封装一份\">#</a> ✅ 实际应用举例（建议你在项目中也封装一份）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ThreadPoolExecutor</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>AbortPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"小结记忆口诀\"><a class=\"anchor\" href=\"#小结记忆口诀\">#</a> 🎯 小结记忆口诀：</h4>\n<pre><code>复制编辑核心最大活多久，排队线程谁来造；\n满了拒绝交策略，七大参数记得牢。\n</code></pre>\n<h4 id=\"答案-2\"><a class=\"anchor\" href=\"#答案-2\">#</a> <strong>✅答案：</strong></h4>\n<ul>\n<li>参数： <code>corePoolSize</code> 、 <code>maximumPoolSize</code> 、 <code>keepAliveTime</code> 、 <code>unit</code> 、 <code>workQueue</code> 、 <code>threadFactory</code> 、 <code>handler</code> （拒绝策略）。</li>\n<li>执行流程：先创建核心线程处理，满了放队列，队列满了再扩展线程，最后拒绝策略。</li>\n</ul>\n<hr />\n<h3 id=\"问题6简述-java-中的锁有哪些它们各自的特点和适用场景\"><a class=\"anchor\" href=\"#问题6简述-java-中的锁有哪些它们各自的特点和适用场景\">#</a> ❓问题 6：简述 Java 中的锁有哪些？它们各自的特点和适用场景？</h3>\n<h4 id=\"1️⃣-悲观锁pessimistic-lock\"><a class=\"anchor\" href=\"#1️⃣-悲观锁pessimistic-lock\">#</a> <strong>1️⃣ 悲观锁（Pessimistic Lock）</strong></h4>\n<ul>\n<li>假设并发冲突很频繁，所以操作之前先加锁，保证线程互斥。</li>\n<li>Java 中的典型表现：\n<ul>\n<li><code>synchronized</code>  关键字（JVM 层实现）</li>\n<li><code>ReentrantLock</code> （JDK 提供的显式锁）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2️⃣-乐观锁optimistic-lock\"><a class=\"anchor\" href=\"#2️⃣-乐观锁optimistic-lock\">#</a> <strong>2️⃣ 乐观锁（Optimistic Lock）</strong></h4>\n<ul>\n<li>假设并发冲突很少，操作前不加锁，操作后检测数据是否被修改。</li>\n<li>典型实现：\n<ul>\n<li>数据库中的  <code>version</code>  字段</li>\n<li>JDK 的  <code>Atomic</code>  类（CAS 机制）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3️⃣-自旋锁spin-lock\"><a class=\"anchor\" href=\"#3️⃣-自旋锁spin-lock\">#</a> <strong>3️⃣ 自旋锁（Spin Lock）</strong></h4>\n<ul>\n<li>线程不会立即阻塞，而是循环等待锁的释放。</li>\n<li>适合锁持有时间非常短的场景，减少线程上下文切换开销。</li>\n<li>Java 中没有直接暴露自旋锁类，但  <code>ReentrantLock</code>  和  <code>AbstractQueuedSynchronizer</code>  内部有自旋机制。</li>\n</ul>\n<hr />\n<h4 id=\"其他锁分类简述\"><a class=\"anchor\" href=\"#其他锁分类简述\">#</a> ✅ 其他锁分类简述：</h4>\n<table>\n<thead>\n<tr>\n<th>锁类型</th>\n<th>说明</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>偏向锁、轻量级锁</td>\n<td>JVM 层面优化，减少无竞争时加锁开销</td>\n<td>绝大多数同步场景</td>\n</tr>\n<tr>\n<td>读写锁（ <code>ReadWriteLock</code> ）</td>\n<td>读多写少，读共享，写独占</td>\n<td>高并发读操作</td>\n</tr>\n<tr>\n<td>公平锁和非公平锁</td>\n<td>公平锁按顺序获得锁，非公平锁效率更高</td>\n<td>需要避免线程饥饿时选公平锁</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"答案-3\"><a class=\"anchor\" href=\"#答案-3\">#</a> <strong>✅答案：</strong></h4>\n<ul>\n<li>悲观锁： <code>synchronized</code> 、 <code>ReentrantLock</code> 。</li>\n<li>乐观锁：版本号机制、 <code>AtomicXXX</code> （CAS）。</li>\n<li>自旋锁：短时间等待锁，自旋减少上下文切换。</li>\n<li>还有读写锁、公平锁等。</li>\n</ul>\n<hr />\n<h3 id=\"问题7请简述-java-中-volatile-和-synchronized-的区别\"><a class=\"anchor\" href=\"#问题7请简述-java-中-volatile-和-synchronized-的区别\">#</a> ❓问题 7：请简述 Java 中  <code>volatile</code>  和  <code>synchronized</code>  的区别？</h3>\n<h4 id=\"volatile-和-synchronized-的区别\"><a class=\"anchor\" href=\"#volatile-和-synchronized-的区别\">#</a> ✅  <code>volatile</code>  和  <code>synchronized</code>  的区别</h4>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>volatile</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>作用</strong></td>\n<td>保证变量的<strong>可见性</strong>和禁止指令重排序</td>\n<td>保证<strong>可见性、原子性和有序性</strong></td>\n</tr>\n<tr>\n<td><strong>使用范围</strong></td>\n<td>只能修饰变量</td>\n<td>可修饰代码块、方法，锁对象不同（对象锁 / 类锁）</td>\n</tr>\n<tr>\n<td><strong>锁机制</strong></td>\n<td>不加锁，不阻塞线程</td>\n<td>通过获取对象监视器实现阻塞和同步</td>\n</tr>\n<tr>\n<td><strong>性能开销</strong></td>\n<td>轻量级，性能开销小</td>\n<td>相对较重，涉及线程阻塞和唤醒</td>\n</tr>\n<tr>\n<td><strong>原子性</strong></td>\n<td>不保证原子性</td>\n<td>保证操作的原子性</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>变量状态标志、状态变化通知</td>\n<td>需要保证复合操作线程安全，临界区代码同步</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h4 id=\"简单示例\"><a class=\"anchor\" href=\"#简单示例\">#</a> ✅ 简单示例</h4>\n<ul>\n<li>\n<p><strong>volatile</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于多个线程之间快速通知状态变化。</p>\n</li>\n<li>\n<p><strong>synchronized</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用于保证代码块执行的互斥，防止并发数据错误。</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"额外补充\"><a class=\"anchor\" href=\"#额外补充\">#</a> ✅ 额外补充</h4>\n<ul>\n<li><code>volatile</code>  不会阻塞线程，也不保证多个操作的整体原子性（比如  <code>count++</code> ）。</li>\n<li><code>synchronized</code>  会阻塞，且能保证执行代码块期间线程独占锁。</li>\n</ul>\n<h4 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> ✅ <strong>总结</strong></h4>\n<blockquote>\n<p><code>volatile</code>  用于保证共享变量的可见性和防止指令重排序，适合轻量级的状态标识，不保证原子性；而  <code>synchronized</code>  是重量级锁，保证代码块的互斥执行，确保了操作的原子性和可见性，但性能开销较大。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>volatile</th>\n<th>synchronized</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>保证</td>\n<td>可见性、禁止重排序</td>\n<td>原子性、可见性、有序性</td>\n</tr>\n<tr>\n<td>用法</td>\n<td>只能修饰变量</td>\n<td>修饰方法或代码块</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>轻量级</td>\n<td>重量级（阻塞）</td>\n</tr>\n<tr>\n<td>适用</td>\n<td>状态标识</td>\n<td>复杂同步操作</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"第二部分jvm\"><a class=\"anchor\" href=\"#第二部分jvm\">#</a> 🧠 <strong>第二部分：JVM</strong></h2>\n<hr />\n<h3 id=\"问题8java-中的类加载机制是怎样的双亲委派模型是什么\"><a class=\"anchor\" href=\"#问题8java-中的类加载机制是怎样的双亲委派模型是什么\">#</a> ❓问题 8：Java 中的类加载机制是怎样的？双亲委派模型是什么？</h3>\n<h4 id=\"java-类加载的生命周期阶段\"><a class=\"anchor\" href=\"#java-类加载的生命周期阶段\">#</a> ✅ Java 类加载的生命周期阶段</h4>\n<ol>\n<li><strong>加载（Loading）</strong>\n<ul>\n<li>通过类的全限定名获取字节码（二进制流），并生成  <code>Class</code>  对象。</li>\n</ul>\n</li>\n<li><strong>验证（Verification）</strong>\n<ul>\n<li>校验字节码的正确性和安全性，防止恶意代码破坏虚拟机安全。</li>\n</ul>\n</li>\n<li><strong>准备（Preparation）</strong>\n<ul>\n<li>给类的静态变量分配内存并赋默认值。</li>\n</ul>\n</li>\n<li><strong>解析（Resolution）</strong>\n<ul>\n<li>把符号引用转为直接引用（如方法、字段等的内存地址）。</li>\n</ul>\n</li>\n<li><strong>初始化（Initialization）</strong>\n<ul>\n<li>执行类的初始化代码，包括静态变量的赋值和静态代码块。</li>\n</ul>\n</li>\n<li><strong>使用（Using）</strong>\n<ul>\n<li>类被调用（new 实例、调用静态方法等）。</li>\n</ul>\n</li>\n<li><strong>卸载（Unloading）</strong>\n<ul>\n<li>类从内存中卸载，通常由 JVM 垃圾回收机制决定。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h4 id=\"双亲委派模型parent-delegation-model\"><a class=\"anchor\" href=\"#双亲委派模型parent-delegation-model\">#</a> ✅ 双亲委派模型（Parent Delegation Model）</h4>\n<ul>\n<li>类加载器在加载类时，先将请求委派给父加载器。</li>\n<li><strong>流程：</strong><br />\n当前类加载器接到加载请求，先让父类加载器尝试加载。<br />\n如果父加载器找不到，当前加载器才自己尝试加载。</li>\n</ul>\n<hr />\n<h4 id=\"设计目的和好处\"><a class=\"anchor\" href=\"#设计目的和好处\">#</a> ✅ 设计目的和好处</h4>\n<ul>\n<li>防止重复加载同一个类，保证 Java 核心类库的安全。</li>\n<li>保证核心类库由启动类加载器加载，避免用户自定义类覆盖核心类。</li>\n</ul>\n<h4 id=\"简短回答示范\"><a class=\"anchor\" href=\"#简短回答示范\">#</a> <strong>✅简短回答示范：</strong></h4>\n<ul>\n<li>类加载包括加载、验证、准备、解析、初始化、使用、卸载。</li>\n<li>双亲委派模型：请求先委托给父加载器，父加载器找不到才自己加载，保证核心类安全。</li>\n</ul>\n<hr />\n<h3 id=\"问题9谈谈你对-java-内存泄漏的理解常见原因和排查方法有哪些\"><a class=\"anchor\" href=\"#问题9谈谈你对-java-内存泄漏的理解常见原因和排查方法有哪些\">#</a> ❓问题 9：谈谈你对 Java 内存泄漏的理解，常见原因和排查方法有哪些？</h3>\n<h4 id=\"什么是内存泄漏\"><a class=\"anchor\" href=\"#什么是内存泄漏\">#</a> ✅ 什么是内存泄漏？</h4>\n<ul>\n<li><strong>内存泄漏</strong>指程序中不再使用的对象仍然被引用，导致垃圾回收器无法回收，从而导致可用内存减少，最终可能导致应用内存溢出（OOM）。</li>\n</ul>\n<hr />\n<h4 id=\"java-中内存泄漏常见原因\"><a class=\"anchor\" href=\"#java-中内存泄漏常见原因\">#</a> ✅ Java 中内存泄漏常见原因</h4>\n<ol>\n<li><strong>长生命周期对象持有短生命周期对象引用</strong><br />\n例如：\n<ul>\n<li>静态集合（ <code>static List</code> ）不断往里添加对象，但没有清理；</li>\n<li>线程池、缓存持有对象，导致对象无法被回收。</li>\n</ul>\n</li>\n<li><strong>监听器或回调未注销</strong>\n<ul>\n<li>注册了事件监听器或观察者，但没有取消，导致对象无法被回收。</li>\n</ul>\n</li>\n<li><strong>内部类和匿名类持有外部类引用</strong>\n<ul>\n<li>导致外部类对象无法回收。</li>\n</ul>\n</li>\n<li><strong>数据库连接、IO 流未关闭</strong>\n<ul>\n<li>资源没有释放，导致内存和资源泄漏。</li>\n</ul>\n</li>\n<li><strong>线程未正确结束</strong>\n<ul>\n<li>线程还活着，线程内持有对象，无法回收。</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h4 id=\"内存泄漏的排查方法\"><a class=\"anchor\" href=\"#内存泄漏的排查方法\">#</a> ✅ 内存泄漏的排查方法</h4>\n<ol>\n<li><strong>使用内存分析工具</strong>\n<ul>\n<li>如  <code>VisualVM</code> 、 <code>Eclipse MAT</code> 、 <code>JProfiler</code> 、 <code>YourKit</code>  等。</li>\n</ul>\n</li>\n<li><strong>堆转储（Heap Dump）分析</strong>\n<ul>\n<li>生成堆快照，分析哪些对象占用大量内存，找到引用链。</li>\n</ul>\n</li>\n<li><strong>代码审查</strong>\n<ul>\n<li>检查静态变量、集合、缓存的使用。</li>\n</ul>\n</li>\n<li><strong>增加日志和监控</strong>\n<ul>\n<li>监控 JVM 内存使用、GC 日志。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> ✅<strong>总结：</strong></h4>\n<ul>\n<li>内存泄漏是无用对象被引用无法回收。</li>\n<li>常见原因：静态集合无清理，监听器未注销，线程未结束等。</li>\n<li>排查用 VisualVM、MAT、代码审查。</li>\n</ul>\n<h4 id=\"简短示范回答-2\"><a class=\"anchor\" href=\"#简短示范回答-2\">#</a> ✅ <strong>简短示范回答</strong></h4>\n<blockquote>\n<p>Java 内存泄漏是指不再使用的对象被持续引用，导致垃圾回收无法回收，最终可能发生内存溢出。常见原因包括静态集合无限制增长、监听器未注销、线程未关闭等。排查方法有使用 VisualVM、MAT 等工具分析堆内存，结合代码审查定位问题。</p>\n</blockquote>\n<hr />\n<h3 id=\"问题10java垃圾回收原理和常见回收器\"><a class=\"anchor\" href=\"#问题10java垃圾回收原理和常见回收器\">#</a> ❓问题 10：Java 垃圾回收原理和常见回收器？</h3>\n<h4 id=\"java垃圾回收gc基本原理\"><a class=\"anchor\" href=\"#java垃圾回收gc基本原理\">#</a> ✅ <strong>Java 垃圾回收（GC）基本原理</strong></h4>\n<ul>\n<li>Java 的垃圾回收机制自动管理内存，主要目的是回收不再使用的对象，释放内存，避免内存泄漏和溢出。</li>\n<li>JVM 堆内存分为<strong>年轻代（Young Generation）** 和 ** 老年代（Old Generation）</strong>。</li>\n<li>新生代采用<strong>复制算法</strong>（Copying），老年代采用<strong>标记 - 整理算法</strong>（Mark-Compact）。</li>\n<li>垃圾回收的核心思想是<strong>可达性分析</strong>：从 GC Roots 开始，所有无法被访问的对象视为垃圾。</li>\n</ul>\n<h4 id=\"常见的垃圾回收器及适用场景\"><a class=\"anchor\" href=\"#常见的垃圾回收器及适用场景\">#</a> <strong>✅ 常见的垃圾回收器及适用场景</strong></h4>\n<table>\n<thead>\n<tr>\n<th>垃圾回收器</th>\n<th>简介</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Serial（串行收集器）</td>\n<td>单线程执行，简单高效，停顿时间长</td>\n<td>单核 CPU，客户端应用，低内存环境</td>\n</tr>\n<tr>\n<td>Parallel（并行收集器）</td>\n<td>多线程执行，注重吞吐量，停顿较短</td>\n<td>多核 CPU，后台批处理，吞吐量优先</td>\n</tr>\n<tr>\n<td>CMS（并发标记清除）</td>\n<td>并发回收，停顿短，但 CPU 占用高</td>\n<td>需要低停顿的应用，如 Web 服务器</td>\n</tr>\n<tr>\n<td>G1（Garbage-First）</td>\n<td>以区域为单位回收，低延迟、可预测停顿</td>\n<td>多核大内存服务器，需响应时间可控的场景</td>\n</tr>\n<tr>\n<td>ZGC / Shenandoah</td>\n<td>低延迟、几乎不暂停的垃圾回收器</td>\n<td>大内存超低延迟应用（JDK 11+ / 12+）</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"简短答法示范\"><a class=\"anchor\" href=\"#简短答法示范\">#</a> ✅ <strong>简短答法示范</strong></h4>\n<blockquote>\n<p>Java GC 自动管理内存，主要通过可达性分析判断对象是否可回收。堆内存分为年轻代和老年代，分别用不同算法回收。常见回收器有串行、并行、CMS 和 G1，选择时根据应用对吞吐量和延迟的需求权衡。</p>\n</blockquote>\n<h4 id=\"答案-4\"><a class=\"anchor\" href=\"#答案-4\">#</a> ✅<strong>答案：</strong></h4>\n<ul>\n<li>GC 自动回收无用对象，堆分年轻代和老年代。</li>\n<li>常用回收器：Serial、Parallel、CMS、G1、ZGC 等。</li>\n<li>选择依据应用延迟和吞吐需求。</li>\n</ul>\n<h2 id=\"第四部分spring-核心原理\"><a class=\"anchor\" href=\"#第四部分spring-核心原理\">#</a> 🌱 <strong>第四部分：Spring 核心原理</strong></h2>\n<h3 id=\"问题11你了解-spring-的声明式事务吗请回答\"><a class=\"anchor\" href=\"#问题11你了解-spring-的声明式事务吗请回答\">#</a> ❓问题 11：你了解 Spring 的声明式事务吗？请回答：**</h3>\n<ol>\n<li><code>@Transactional</code>  注解一般写在什么地方？</li>\n<li>默认情况下，哪些异常会触发事务回滚？</li>\n<li>如果我希望遇到某个自定义异常不回滚，应该怎么做？</li>\n</ol>\n<h4 id=\"答案-5\"><a class=\"anchor\" href=\"#答案-5\">#</a> ✅<strong>答案：</strong></h4>\n<ol>\n<li>\n<p><code>@Transactional</code>  最推荐放在 <strong> <code>Service</code>  层的方法上</strong>，因为：</p>\n<ul>\n<li>\n<p>控制事务粒度更细；</p>\n</li>\n<li>\n<p>避免类中某些非事务方法被误标；</p>\n</li>\n<li>\n<p>类上标注表示所有  <code>public</code>  方法都带事务，但无法精细控制。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>默认运行时异常和 Error 回滚，受检异常不回滚。</p>\n</li>\n<li>\n<p>如果想让事务遇到某个自定义异常不回滚，可以在  <code>@Transactional</code>  注解中用  <code>noRollbackFor</code>  属性指定该异常的类，比如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>noRollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">MyCustomException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样即使抛出  <code>MyCustomException</code> ，事务也不会回滚。</p>\n</li>\n</ol>\n",
            "tags": [
                "Java",
                "面试",
                "Java",
                "面试",
                "ChatGPT"
            ]
        },
        {
            "id": "http://blog.icoders.club/installGitOnLinux/",
            "url": "http://blog.icoders.club/installGitOnLinux/",
            "title": "Linux中手动安装Git",
            "date_published": "2025-07-26T10:59:37.000Z",
            "content_html": "<blockquote>\n<p>之所以写这篇文章的初衷是由于本人在 <code>CentOS7</code>  使用 <code>yum</code>  无法安装到最新版本的 git，通过查询<a href=\"https://git-scm.com/\"> Git 官网</a>得知，需下载源码进行源码编译安装。又考虑到大多数人员对于 Linux 一知半解，无法快速上手，故写下这篇文章，以供参考。</p>\n</blockquote>\n<h3 id=\"1-下载\"><a class=\"anchor\" href=\"#1-下载\">#</a> 1. 下载</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 此处以 V2.38.1 为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.38.1.tar.gz</pre></td></tr></table></figure><h3 id=\"2-安装依赖包\"><a class=\"anchor\" href=\"#2-安装依赖包\">#</a> 2. 安装依赖包</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> gcc perl-ExtUtils-MakeMaker</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 之所以选择先安装依赖再删除原有 'git'，是因为在安装上述依赖软件过程中，部分软件又会依赖 'git'，所以在此处应先安装依赖再删除 'git'</span></pre></td></tr></table></figure><h3 id=\"3-删除原有git版本\"><a class=\"anchor\" href=\"#3-删除原有git版本\">#</a> 3. 删除原有 git 版本</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove <span class=\"token function\">git</span></pre></td></tr></table></figure><h3 id=\"4-解压缩文件并移动至指定位置\"><a class=\"anchor\" href=\"#4-解压缩文件并移动至指定位置\">#</a> 4. 解压缩文件并移动至指定位置</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压缩文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> git-2.38.1.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将解压得到的文件夹移动到 /usr/local/soft/ 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> git-2.38.1 /usr/local/soft/</pre></td></tr></table></figure><h3 id=\"5-编译安装\"><a class=\"anchor\" href=\"#5-编译安装\">#</a> 5. 编译安装</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入 git 目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/soft/git-2.38.1/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 配置编译后的 git 安装位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/git --with-iconv<span class=\"token operator\">=</span>/usr/local/libiconv</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 编译</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h3 id=\"6-配置环境变量\"><a class=\"anchor\" href=\"#6-配置环境变量\">#</a> 6. 配置环境变量</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 因安装的 git 非系统命令，此时使用 'git --version' 命令会报错：'-bash: git command not found', 故需要先配置环境变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"export PATH=<span class=\"token environment constant\">$PATH</span>:/usr/local/git/bin\"</span> <span class=\"token operator\">>></span> /etc/profile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 生效配置文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><h3 id=\"7-使用git-version命令查看最新版本\"><a class=\"anchor\" href=\"#7-使用git-version命令查看最新版本\">#</a> 7. 使用 <code>git --version</code>  命令查看最新版本</h3>\n<h3 id=\"8-全局配置\"><a class=\"anchor\" href=\"#8-全局配置\">#</a> 8. 全局配置</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token comment\"># 配置用户名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token comment\"># 配置邮箱</span></pre></td></tr></table></figure>",
            "tags": [
                "教程",
                "Linux",
                "Git",
                "Linux",
                "Git",
                "环境搭建"
            ]
        },
        {
            "id": "http://blog.icoders.club/Linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2SpringBoot-Vue%E9%A1%B9%E7%9B%AE/",
            "url": "http://blog.icoders.club/Linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2SpringBoot-Vue%E9%A1%B9%E7%9B%AE/",
            "title": "Linux系统部署SpringBoot+Vue项目",
            "date_published": "2025-07-25T04:08:17.000Z",
            "content_html": "<h2 id=\"一-环境搭建\"><a class=\"anchor\" href=\"#一-环境搭建\">#</a> 一、 环境搭建</h2>\n<blockquote>\n<p>本篇所有软件均安装于 <code>/usr/local/soft</code>  目录中，以方便管理，您可自行选择其它目录，或与本篇所使用的目录保持一致，若您选择与本篇中目录保持一致，可先行通过 <code>mkdir -p /usr/local/soft</code>  命令创建该目录</p>\n</blockquote>\n<ol>\n<li>\n<p>JDK（此处以 <code>Oracle JDK 11</code>  示例，如需安装 <code>OpenJDK</code>  的可自行百度）</p>\n<ol>\n<li>\n<p>下载</p>\n<ol>\n<li><a href=\"https://www.oracle.com/cn/java/technologies/downloads/#java11\">官网下载</a></li>\n<li>网盘下载</li>\n</ol>\n</li>\n<li>\n<p>将下载好的文件上传至服务器中（如： <code>/home</code>  中）</p>\n</li>\n<li>\n<p>解压缩文件并移动至指定位置</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压缩文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> /home/jdk-11.0.22_linux-x64_bin.tar</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将解压得到的文件夹移动到 /usr/local/soft/ 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> jdk-11.0.22 /usr/local/soft/</pre></td></tr></table></figure></li>\n<li>\n<p>配置环境变量</p>\n<ol>\n<li>\n<p>编辑 <code>/etc/profile</code>  文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>在文件末尾添加如下内容</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/soft/jdk-11.0.22</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span>.:<span class=\"token variable\">$&#123;JAVA_HOME&#125;</span>/lib</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure></li>\n<li>\n<p>让配置文件生效</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>验证（使用如下两个命令）</p>\n<ol>\n<li><code>java -version</code></li>\n<li><code>javac</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>Maven</p>\n<ol>\n<li>\n<p>下载</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 若失效，请前往官网获取最新版本地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wget</span> https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz</pre></td></tr></table></figure></li>\n<li>\n<p>解压缩文件并移动至指定位置</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压缩文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> apache-maven-3.9.6-bin.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将解压得到的文件夹移动到 /usr/local/soft/ 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> apache-maven-3.9.6 /usr/local/soft</pre></td></tr></table></figure></li>\n<li>\n<p>配置环境变量</p>\n<ol>\n<li>\n<p>编辑 <code>/etc/profile</code>  文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/profile</pre></td></tr></table></figure></li>\n<li>\n<p>在文件末尾添加如下内容</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># maven 版本号与自己下载的需要对应</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">MAVEN_HOME</span><span class=\"token operator\">=</span>/usr/local/soft/apache-maven-3.9.6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$MAVEN_HOME</span>/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure></li>\n<li>\n<p>让配置文件生效</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>验证（使用 <code>mvn -v</code>  命令）</p>\n</li>\n</ol>\n</li>\n<li>\n<p>MySQL</p>\n</li>\n<li>\n<p>Redis</p>\n<ol>\n<li>\n<p>下载</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://download.redis.io/releases/redis-6.2.11.tar.gz?_gl<span class=\"token operator\">=</span><span class=\"token number\">1</span>*v51bgf*_ga*Mzk3NDcyMDQuMTY3NjkwMzM3Mw<span class=\"token punctuation\">..</span>*_ga_8BKGRQKRPV*MTY4MDc4Nzc1Mi4zLjEuMTY4MDc4Nzc4Ni4yNi4wLjA.</pre></td></tr></table></figure></li>\n<li>\n<p>安装</p>\n<ol>\n<li>\n<p>解压缩文件并移动至指定位置</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 解压缩文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> /home/redis-6.2.11.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将解压得到的文件夹移动到 /usr/local/soft/ 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> redis-6.2.11 /usr/local/soft/</pre></td></tr></table></figure></li>\n<li>\n<p>编译安装</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入 redis 目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/soft/redis-6.2.11/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 编译</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> src</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span> <span class=\"token assign-left variable\">PREFIX</span><span class=\"token operator\">=</span>/usr/local/soft/redis-6.2.11</pre></td></tr></table></figure></li>\n<li>\n<p>移动配置文件到安装目录下</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> /usr/local/soft/redis-6.2.11/etc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cp</span> redis.conf ./etc/redis.conf</pre></td></tr></table></figure></li>\n<li>\n<p>配置 <code>redis</code>  为后台启动</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /usr/local/soft/redis-6.2.11/etc/redis.conf //将daemonize no 改成daemonize <span class=\"token function\">yes</span></pre></td></tr></table></figure></li>\n<li>\n<p>将 <code>redis</code>  加入到开机启动</p>\n<ol>\n<li>\n<p>编辑 <code>/etc/rc.local</code>  文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /etc/rc.local</pre></td></tr></table></figure></li>\n<li>\n<p>添加如下内容</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/soft/redis-6.2.11/bin/redis-server /usr/local/soft/redis-6.2.11/etc/redis.conf</pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>开启 <code>redis</code></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/soft/redis-6.2.11/bin/redis-server /usr/local/soft/redis-6.2.11/etc/redis.conf</pre></td></tr></table></figure></li>\n<li>\n<p>将 <code>redis-cli</code> , <code>redis-server</code>  拷贝到 <code>bin</code>  下，让 <code>redis-cli</code>  指令可以在任意目录下直接使用</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /usr/local/soft/redis-6.2.11/bin/redis-server /usr/local/bin/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> /usr/local/soft/redis-6.2.11/bin/redis-cli /usr/local/bin/</pre></td></tr></table></figure></li>\n<li>\n<p>设置 <code>redis</code>  密码</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.运行命令：redis-cli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b.查看现有的redis密码<span class=\"token punctuation\">(</span>可选操作，可以没有<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>　　运行命令：config get requirepass</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c.设置redis密码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    运行命令：config <span class=\"token builtin class-name\">set</span> requirepass ****<span class=\"token punctuation\">(</span>****为你要设置的密码<span class=\"token punctuation\">)</span>，设置成功的话会返回‘OK’字样</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>d.测试连接</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>　　重启redis服务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>　　//（redis-cli <span class=\"token parameter variable\">-h</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span> <span class=\"token parameter variable\">-a</span> ****（****为你设置的密码））</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>　　输入 redis-cli 进入命令模式，使用 auth <span class=\"token string\">'*****'</span> （****为你设置的密码）登陆</pre></td></tr></table></figure></li>\n<li>\n<p>配置外网访问</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.配置防火墙:  **firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">6379</span>/tcp --permanent**（开放**6379**端口）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>**systemctl restart firewalld**（重启防火墙以使配置即时生效）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>查看系统所有开放的端口：firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --list-ports</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b.此时 虽然防火墙开放了6379端口，但是外网还是无法访问的，因为redis监听的是127.0.0.1：6379，并不监听外网的请求。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>（一）把文件夹目录里的redis.conf配置文件里的bind <span class=\"token number\">127.0</span>.0.1前面加<span class=\"token string\">'#'</span>注释掉</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>（二）命令：redis-cli连接到redis后，通过 config get  daemonize和config get  protected-mode 是不是都为no，如果不是，就用config <span class=\"token builtin class-name\">set</span> 配置名 属性 改为no。</pre></td></tr></table></figure></li>\n<li>\n<p>设置开机启动</p>\n<ol>\n<li>\n<p>在 <code>/etc</code>  下新建 <code>redis</code>  目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /etc/redis</pre></td></tr></table></figure></li>\n<li>\n<p>复制配置文件，并重命名为 <code>6379.conf</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /usr/local/soft/redis-6.2.11/etc/redis.conf /etc/redis/6379.conf</pre></td></tr></table></figure></li>\n<li>\n<p>复制启动脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /usr/local/soft/redis-6.2.11/utils/redis_init_script /etc/init.d/redis</pre></td></tr></table></figure></li>\n<li>\n<p>执行自启动命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /etc/init.d/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chkconfig</span> redis on</pre></td></tr></table></figure></li>\n<li>\n<p>启动 <code>redis</code></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开 redis 命令:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">service</span> redis start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 关闭 redis 命令:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">service</span> redis stop</pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>Node.js</p>\n</li>\n<li>\n<p>Nginx</p>\n<ol>\n<li>\n<p>软件下载</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://nginx.org/download/nginx-1.22.1.tar.gz</pre></td></tr></table></figure></li>\n<li>\n<p>解压缩并移动至指定位置（例： <code>/usr/local/soft/</code> ）</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#解压下载的 nginx 压缩包</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> nginx-1.22.1.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#将解压得到的文件夹移动到 /usr/local/soft/ 目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mv</span> nginx-1.22.1 /usr/local/soft/</pre></td></tr></table></figure></li>\n<li>\n<p>安装</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#进入 nginx 目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/soft/nginx-1.22.1/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#执行命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./configure</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 若出现./configure: error: the HTTP rewrite module requires the PCRE library. 这一提示，说明我们没有安装对应的依赖包，需要先安装如下依赖包。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> gcc zlib zlib-devel pcre-devel openssl openssl-devel</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#将上述依赖安装完毕之后，再次执行./configure</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./configure</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#执行 make 命令进行编译，然后再执行 make install 命令安装</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure></li>\n<li>\n<p>启动 nginx</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/nginx/sbin/nginx</pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<ol>\n<li>\n<p>查看 <code>nginx</code>  进程，使用 <code>ps -ef | grep nginx</code>  命令可查看 <code>nginx</code>  进程运行状态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitee.com/admin-zhang/pic/raw/master/202404012121742.png\" alt=\"image-20240401212111705\" /></p>\n</li>\n<li>\n<p>通过 <code>ip</code>  + 端口号访问（如： <code>127.0.0.1:80</code> ，注：nginx 默认配置端口号为 80）</p>\n<img loading=\"lazy\" data-src=\"https://gitee.com/admin-zhang/pic/raw/master/202404012113335.png\" alt=\"nginx安装成功效果展示图\"/>\n</li>\n</ol>\n</li>\n<li>\n<p>注意事项</p>\n<ol>\n<li>提前安装好所需的依赖</li>\n<li><code>nginx</code>  默认配置端口号为 80，如需更改，可通过修改 <code>nginx.conf</code>  文件中的 <code>listen</code>  值，文件位于 <code>nginx</code>  安装目录下 <code>conf</code>  文件夹中，如： <code>/usr/local/soft/nginx-1.22.1/conf</code></li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://gitee.com/admin-zhang/pic/raw/master/202404012119951.png\" alt=\"image-20240401211946869\" /></p>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "教程",
                "Java",
                "项目部署",
                "java",
                "SpringBoot",
                "Vue",
                "Linux",
                "前后端分离"
            ]
        },
        {
            "id": "http://blog.icoders.club/%E9%AB%98%E9%A2%91%20SQL%2050%20%E9%A2%98%EF%BC%88%E5%9F%BA%E7%A1%80%E7%89%88%EF%BC%89/",
            "url": "http://blog.icoders.club/%E9%AB%98%E9%A2%91%20SQL%2050%20%E9%A2%98%EF%BC%88%E5%9F%BA%E7%A1%80%E7%89%88%EF%BC%89/",
            "title": "高频 SQL 50 题（基础版）",
            "date_published": "2025-07-23T05:12:32.000Z",
            "content_html": "<h2 id=\"一-查询\"><a class=\"anchor\" href=\"#一-查询\">#</a> 一、查询</h2>\n<h3 id=\"1-可回收且低脂的产品简单\"><a class=\"anchor\" href=\"#1-可回收且低脂的产品简单\">#</a> 1. 可回收且低脂的产品【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Products</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| product_id  | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| low_fats    | enum    |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| recyclable  | enum    |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>product_id 是该表的主键（具有唯一值的列）。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>low_fats 是枚举类型，取值为以下两种 ('Y', 'N')，其中 'Y' 表示该产品是低脂产品，'N' 表示不是低脂产品。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>recyclable 是枚举类型，取值为以下两种 ('Y', 'N')，其中 'Y' 表示该产品可回收，而 'N' 表示不可回收。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>编写解决方案找出既是低脂又是可回收的产品编号。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>返回结果 无顺序要求 。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>返回结果格式如下例所示：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Products 表：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>+-------------+----------+------------+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>| product_id  | low_fats | recyclable |</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>+-------------+----------+------------+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| 0           | Y        | N          |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>| 1           | Y        | Y          |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 2           | N        | Y          |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 3           | Y        | Y          |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| 4           | N        | N          |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+-------------+----------+------------+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+-------------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| product_id  |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+-------------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| 1           |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 3           |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+-------------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>只有产品 id 为 1 和 3 的产品，既是低脂又是可回收的产品。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Products <span class=\"token punctuation\">(</span>product_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> low_fats <span class=\"token keyword\">ENUM</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> recyclable <span class=\"token keyword\">ENUM</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Products<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Products <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> low_fats<span class=\"token punctuation\">,</span> recyclable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Products <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> low_fats<span class=\"token punctuation\">,</span> recyclable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Products <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> low_fats<span class=\"token punctuation\">,</span> recyclable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Products <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> low_fats<span class=\"token punctuation\">,</span> recyclable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Products <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> low_fats<span class=\"token punctuation\">,</span> recyclable<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> product_id <span class=\"token keyword\">from</span> Products <span class=\"token keyword\">where</span> low_fats <span class=\"token operator\">=</span> <span class=\"token string\">'Y'</span> <span class=\"token operator\">and</span> recyclable <span class=\"token operator\">=</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-寻找用户推荐人简单\"><a class=\"anchor\" href=\"#2-寻找用户推荐人简单\">#</a> 2. 寻找用户推荐人【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表: Customer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id          | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| name        | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| referee_id  | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>在 SQL 中，id 是该表的主键列。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>该表的每一行表示一个客户的 id、姓名以及推荐他们的客户的 id。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>找出那些 没有被 id = 2 的客户 推荐 的客户的姓名。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>结果格式如下所示。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>输入： </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Customer 表:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+----+------+------------+</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>| id | name | referee_id |</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+----+------+------------+</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>| 1  | Will | null       |</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>| 2  | Jane | null       |</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>| 3  | Alex | 2          |</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| 4  | Bill | null       |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>| 5  | Zack | 1          |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 6  | Mark | 2          |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>+----+------+------------+</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>| name |</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| Will |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>| Jane |</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| Bill |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| Zack |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Customer <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> referee_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Customer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Will'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bill'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'None'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Zack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Customer <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> referee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> customer <span class=\"token keyword\">where</span> referee_id <span class=\"token operator\">&lt;></span> <span class=\"token number\">2</span> <span class=\"token operator\">or</span> referee_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-大的国家简单\"><a class=\"anchor\" href=\"#3-大的国家简单\">#</a> 3. 大的国家【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>World 表：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| name        | varchar |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| continent   | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| area        | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| population  | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>| gdp         | bigint  |</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>name 是该表的主键（具有唯一值的列）。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>这张表的每一行提供：国家名称、所属大陆、面积、人口和 GDP 值。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>如果一个国家满足下述两个条件之一，则认为该国是 大国 ：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>面积至少为 300 万平方公里（即，3000000 km2），或者</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>人口至少为 2500 万（即 25000000）</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>编写解决方案找出 大国 的国家名称、人口和面积。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>按 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>返回结果格式如下例所示。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>World 表：</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+-------------+-----------+---------+------------+--------------+</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| name        | continent | area    | population | gdp          |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>+-------------+-----------+---------+------------+--------------+</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>| Albania     | Europe    | 28748   | 2831741    | 12960000000  |</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| Andorra     | Europe    | 468     | 78115      | 3712000000   |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+-------------+-----------+---------+------------+--------------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+-------------+------------+---------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| name        | population | area    |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>+-------------+------------+---------+</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| Afghanistan | 25500100   | 652230  |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| Algeria     | 37100000   | 2381741 |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+-------------+------------+---------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> World</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name       <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    continent  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    area       <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    population <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    gdp        <span class=\"token keyword\">bigint</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> World<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Afghanistan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Asia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'652230'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25500100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20343000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Albania'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Europe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'28748'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2831741'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'12960000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Algeria'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Africa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2381741'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'37100000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'188681000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Andorra'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Europe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'468'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'78115'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3712000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> World <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> continent<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> gdp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Angola'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Africa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1246700'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20609294'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100990000000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> area</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> World</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> area <span class=\"token operator\">>=</span> <span class=\"token number\">3000000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">or</span> population <span class=\"token operator\">>=</span> <span class=\"token number\">25000000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4文章浏览i简单\"><a class=\"anchor\" href=\"#4文章浏览i简单\">#</a> 4. 文章浏览 Ⅰ【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Views 表：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| article_id    | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| author_id     | int     |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| viewer_id     | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| view_date     | date    |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>此表可能会存在重复行。（换句话说，在 SQL 中这个表没有主键）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>此表的每一行都表示某人在某天浏览了某位作者的某篇文章。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>请注意，同一人的 author_id 和 viewer_id 是相同的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>请查询出所有浏览过自己文章的作者</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>结果按照 id 升序排列。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>查询结果的格式如下所示：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Views 表：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+------------+-----------+-----------+------------+</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>| article_id | author_id | viewer_id | view_date  |</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+------------+-----------+-----------+------------+</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>| 1          | 3         | 5         | 2019-08-01 |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 1          | 3         | 6         | 2019-08-02 |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 2          | 7         | 7         | 2019-08-01 |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| 2          | 7         | 6         | 2019-08-02 |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>| 4          | 7         | 1         | 2019-07-22 |</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>| 3          | 4         | 4         | 2019-07-21 |</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>| 3          | 4         | 4         | 2019-07-21 |</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+------------+-----------+-----------+------------+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| id   |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 4    |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 7    |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>+------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Views</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    article_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    author_id  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    viewer_id  <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    view_date  <span class=\"token keyword\">date</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Views<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-08-01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-08-02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-08-01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-08-02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-07-22'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-07-21'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Views <span class=\"token punctuation\">(</span>article_id<span class=\"token punctuation\">,</span> author_id<span class=\"token punctuation\">,</span> viewer_id<span class=\"token punctuation\">,</span> view_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-07-21'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> author_id <span class=\"token keyword\">as</span> id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> views</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> author_id <span class=\"token operator\">=</span> viewer_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> author_id <span class=\"token keyword\">asc</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-无效的推文简单\"><a class=\"anchor\" href=\"#5-无效的推文简单\">#</a> 5. 无效的推文【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Tweets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name    | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| tweet_id       | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| content        | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>在 SQL 中，tweet_id 是这个表的主键。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这个表包含某社交媒体 App 中所有的推文。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>查询所有无效推文的编号（ID）。当推文内容中的字符数严格大于 15 时，该推文是无效的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>以任意顺序返回结果表。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>查询结果格式如下所示：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Tweets 表：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>+----------+----------------------------------+</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>| tweet_id | content                          |</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>+----------+----------------------------------+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>| 1        | Vote for Biden                   |</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>| 2        | Let us make America great again! |</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+----------+----------------------------------+</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>+----------+</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| tweet_id |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+----------+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>| 2        |</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+----------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>推文 1 的长度 length = 14。该推文是有效的。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>推文 2 的长度 length = 32。该推文是无效的。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Tweets</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tweet_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    content  <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Tweets<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Tweets <span class=\"token punctuation\">(</span>tweet_id<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Vote for Biden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Tweets <span class=\"token punctuation\">(</span>tweet_id<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Let us make America great again!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> tweet_id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Tweets</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> length<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"二-连接\"><a class=\"anchor\" href=\"#二-连接\">#</a> 二、连接</h2>\n<h3 id=\"1-使用唯一标识码替换员工id简单\"><a class=\"anchor\" href=\"#1-使用唯一标识码替换员工id简单\">#</a> 1. 使用唯一标识码替换员工 ID【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Employees 表：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id            | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| name          | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>在 SQL 中，id 是这张表的主键。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>这张表的每一行分别代表了某公司其中一位员工的名字和 ID 。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>EmployeeUNI 表：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| id            | int     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| unique_id     | int     |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>在 SQL 中，(id, unique_id) 是这张表的主键。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>这张表的每一行包含了该公司某位员工的 ID 和他的唯一标识码（unique ID）。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>展示每位用户的 唯一标识码（unique ID ）；如果某位员工没有唯一标识码，使用 null 填充即可。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>你可以以 任意 顺序返回结果表。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>返回结果的格式如下例所示。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Employees 表:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+----+----------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| id | name     |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+----+----------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| 1  | Alice    |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 7  | Bob      |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 11 | Meir     |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 90 | Winston  |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 3  | Jonathan |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>+----+----------+</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>EmployeeUNI 表:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+----+-----------+</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>| id | unique_id |</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>+----+-----------+</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| 3  | 1         |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| 11 | 2         |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 90 | 3         |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>+----+-----------+</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>+-----------+----------+</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>| unique_id | name     |</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>+-----------+----------+</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>| null      | Alice    |</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| null      | Bob      |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| 2         | Meir     |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>| 3         | Winston  |</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>| 1         | Jonathan |</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>+-----------+----------+</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Alice and Bob 没有唯一标识码, 因此我们使用 null 替代。</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Meir 的唯一标识码是 2 。</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Winston 的唯一标识码是 3 。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Jonathan 唯一标识码是 1 。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Employees <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> EmployeeUNI <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> unique_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Employees<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employees <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employees <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employees <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Meir'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employees <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'90'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Winston'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employees <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jonathan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> EmployeeUNI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> EmployeeUNI <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> unique_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> EmployeeUNI <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> unique_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> EmployeeUNI <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> unique_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'90'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> e2<span class=\"token punctuation\">.</span>unique_id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Employees e</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> employeeuni e2 <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> e2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-产品销售分析简单\"><a class=\"anchor\" href=\"#2-产品销售分析简单\">#</a> 2. 产品销售分析【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>销售表 Sales：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+-------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type  |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+-------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| sale_id     | int   |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| product_id  | int   |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| year        | int   |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| quantity    | int   |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>| price       | int   |</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>+-------------+-------+</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>(sale_id, year) 是销售表 Sales 的主键（具有唯一值的列的组合）。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>product_id 是关联到产品表 Product 的外键（reference 列）。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>该表的每一行显示 product_id 在某一年的销售情况。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>注意: price 表示每单位价格。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>产品表 Product：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| Column Name  | Type    |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>| product_id   | int     |</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>| product_name | varchar |</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>product_id 是表的主键（具有唯一值的列）。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>该表的每一行表示每种产品的产品名称。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>编写解决方案，以获取 Sales 表中所有 sale_id 对应的 product_name 以及该产品的所有 year 和 price 。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>返回结果表 无顺序要求 。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>结果格式示例如下。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Sales 表：</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+---------+------------+------+----------+-------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| sale_id | product_id | year | quantity | price |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+---------+------------+------+----------+-------+ </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 1       | 100        | 2008 | 10       | 5000  |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 2       | 100        | 2009 | 12       | 5000  |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 7       | 200        | 2011 | 15       | 9000  |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>+---------+------------+------+----------+-------+</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Product 表：</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>| product_id | product_name |</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| 100        | Nokia        |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 200        | Apple        |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 300        | Samsung      |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>+--------------+-------+-------+</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| product_name | year  | price |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>+--------------+-------+-------+</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| Nokia        | 2008  | 5000  |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| Nokia        | 2009  | 5000  |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>| Apple        | 2011  | 9000  |</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>+--------------+-------+-------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Sales <span class=\"token punctuation\">(</span>sale_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> product_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">year</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> quantity <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> price <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Product <span class=\"token punctuation\">(</span>product_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> product_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Sales<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Sales <span class=\"token punctuation\">(</span>sale_id<span class=\"token punctuation\">,</span> product_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">year</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2008'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Sales <span class=\"token punctuation\">(</span>sale_id<span class=\"token punctuation\">,</span> product_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">year</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2009'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'12'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Sales <span class=\"token punctuation\">(</span>sale_id<span class=\"token punctuation\">,</span> product_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">year</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'200'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2011'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'15'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Product<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Product <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> product_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nokia'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Product <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> product_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'200'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Product <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> product_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'300'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Samsung'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> p<span class=\"token punctuation\">.</span>product_name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token keyword\">year</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> sales s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> product p <span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>product_id <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>product_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"3-进店却未进行过交易的顾客简单\"><a class=\"anchor\" href=\"#3-进店却未进行过交易的顾客简单\">#</a> 3. 进店却未进行过交易的顾客【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Visits</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| visit_id    | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| customer_id | int     |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>visit_id 是该表中具有唯一值的列。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>该表包含有关光临过购物中心的顾客的信息。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>表：Transactions</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| Column Name    | Type    |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| transaction_id | int     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| visit_id       | int     |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>| amount         | int     |</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>transaction_id 是该表中具有唯一值的列。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>此表包含 visit_id 期间进行的交易的信息。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>有一些顾客可能光顾了购物中心但没有进行交易。请你编写一个解决方案，来查找这些顾客的 ID ，以及他们只光顾不交易的次数。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>返回以 任何顺序 排序的结果表。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>返回结果格式如下例所示。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>输入:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Visits</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+----------+-------------+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>| visit_id | customer_id |</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+----------+-------------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 1        | 23          |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 2        | 9           |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 4        | 30          |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 5        | 54          |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 6        | 96          |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| 7        | 54          |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>| 8        | 54          |</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+----------+-------------+</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Transactions</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>+----------------+----------+--------+</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| transaction_id | visit_id | amount |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>+----------------+----------+--------+</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 2              | 5        | 310    |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>| 3              | 5        | 300    |</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>| 9              | 5        | 200    |</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>| 12             | 1        | 910    |</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| 13             | 2        | 970    |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>+----------------+----------+--------+</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>输出:</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>+-------------+----------------+</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>| customer_id | count_no_trans |</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>+-------------+----------------+</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>| 54          | 2              |</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>| 30          | 1              |</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>| 96          | 1              |</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>+-------------+----------------+</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>解释:</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>ID = 23 的顾客曾经逛过一次购物中心，并在 ID = 12 的访问期间进行了一笔交易。</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>ID = 9 的顾客曾经逛过一次购物中心，并在 ID = 13 的访问期间进行了一笔交易。</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>ID = 30 的顾客曾经去过购物中心，并且没有进行任何交易。</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>ID = 54 的顾客三度造访了购物中心。在 2 次访问中，他们没有进行任何交易，在 1 次访问中，他们进行了 3 次交易。</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>ID = 96 的顾客曾经去过购物中心，并且没有进行任何交易。</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>如我们所见，ID 为 30 和 96 的顾客一次没有进行任何交易就去了购物中心。顾客 54 也两次访问了购物中心并且没有进行任何交易。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Visits<span class=\"token punctuation\">(</span>visit_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> customer_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> <span class=\"token keyword\">Transactions</span><span class=\"token punctuation\">(</span>transaction_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> visit_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> amount <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Visits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'23'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'96'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Visits <span class=\"token punctuation\">(</span>visit_id<span class=\"token punctuation\">,</span> customer_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'54'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">Transactions</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>transaction_id<span class=\"token punctuation\">,</span> visit_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'310'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>transaction_id<span class=\"token punctuation\">,</span> visit_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'300'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>transaction_id<span class=\"token punctuation\">,</span> visit_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>transaction_id<span class=\"token punctuation\">,</span> visit_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'910'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>transaction_id<span class=\"token punctuation\">,</span> visit_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'970'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> v<span class=\"token punctuation\">.</span>customer_id<span class=\"token punctuation\">,</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> count_no_trans</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> visits v</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> <span class=\"token keyword\">transactions</span> t <span class=\"token keyword\">on</span> v<span class=\"token punctuation\">.</span>visit_id <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>visit_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> t<span class=\"token punctuation\">.</span>transaction_id <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> v<span class=\"token punctuation\">.</span>customer_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"4-上升的温度简单\"><a class=\"anchor\" href=\"#4-上升的温度简单\">#</a> 4. 上升的温度【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Weather</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id            | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| recordDate    | date    |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| temperature   | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>id 是该表具有唯一值的列。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>没有具有相同 recordDate 的不同行。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>该表包含特定日期的温度信息</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>编写解决方案，找出与之前（昨天的）日期相比温度更高的所有日期的 id 。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>返回结果 无顺序要求 。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>结果格式如下例子所示。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Weather 表：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>+----+------------+-------------+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>| id | recordDate | Temperature |</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>+----+------------+-------------+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| 1  | 2015-01-01 | 10          |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>| 2  | 2015-01-02 | 25          |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 3  | 2015-01-03 | 20          |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 4  | 2015-01-04 | 30          |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>+----+------------+-------------+</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>+----+</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>| id |</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+----+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>| 2  |</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| 4  |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+----+</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>2015-01-02 的温度比前一天高（10 -> 25）</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>2015-01-04 的温度比前一天高（20 -> 30）</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Weather <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> recordDate <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> temperature <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Weather<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Weather <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> recordDate<span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2015-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Weather <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> recordDate<span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2015-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'25'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Weather <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> recordDate<span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2015-01-03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Weather <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> recordDate<span class=\"token punctuation\">,</span> temperature<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2015-01-04'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> w<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> weather w</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> weather w2 <span class=\"token keyword\">on</span> datediff<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>recordDate<span class=\"token punctuation\">,</span> w2<span class=\"token punctuation\">.</span>recordDate<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> w<span class=\"token punctuation\">.</span>temperature <span class=\"token operator\">></span> w2<span class=\"token punctuation\">.</span>temperature<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-每台机器的进程平均运行时间简单\"><a class=\"anchor\" href=\"#5-每台机器的进程平均运行时间简单\">#</a> 5. 每台机器的进程平均运行时间【简单】</h3>\n<blockquote>\n<p>考察点</p>\n</blockquote>\n<ul>\n<li>自连接</li>\n<li>round</li>\n<li>avg</li>\n</ul>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表: Activity</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name    | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| machine_id     | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| process_id     | int     |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| activity_type  | enum    |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| timestamp      | float   |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+----------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>该表展示了一家工厂网站的用户活动。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>(machine_id, process_id, activity_type) 是当前表的主键（具有唯一值的列的组合）。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>machine_id 是一台机器的ID号。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>process_id 是运行在各机器上的进程ID号。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>activity_type 是枚举类型 ('start', 'end')。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>timestamp 是浮点类型,代表当前时间(以秒为单位)。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>'start' 代表该进程在这台机器上的开始运行时间戳 , 'end' 代表该进程在这台机器上的终止运行时间戳。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>同一台机器，同一个进程都有一对开始时间戳和结束时间戳，而且开始时间戳永远在结束时间戳前面。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>现在有一个工厂网站由几台机器运行，每台机器上运行着 相同数量的进程 。编写解决方案，计算每台机器各自完成一个进程任务的平均耗时。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>完成一个进程任务的时间指进程的'end' 时间戳 减去 'start' 时间戳。平均耗时通过计算每台机器上所有进程任务的总耗费时间除以机器上的总进程数量获得。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>结果表必须包含machine_id（机器ID） 和对应的 average time（平均耗时） 别名 processing_time，且四舍五入保留3位小数。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>以 任意顺序 返回表。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>具体参考例子如下。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>示例 1:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Activity table:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+------------+------------+---------------+-----------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| machine_id | process_id | activity_type | timestamp |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+------------+------------+---------------+-----------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| 0          | 0          | start         | 0.712     |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 0          | 0          | end           | 1.520     |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 0          | 1          | start         | 3.140     |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 0          | 1          | end           | 4.120     |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 1          | 0          | start         | 0.550     |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 1          | 0          | end           | 1.550     |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| 1          | 1          | start         | 0.430     |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>| 1          | 1          | end           | 1.420     |</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>| 2          | 0          | start         | 4.100     |</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>| 2          | 0          | end           | 4.512     |</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| 2          | 1          | start         | 2.500     |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| 2          | 1          | end           | 5.000     |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>+------------+------------+---------------+-----------+</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>+------------+-----------------+</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>| machine_id | processing_time |</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>+------------+-----------------+</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| 0          | 0.894           |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>| 1          | 0.995           |</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| 2          | 1.456           |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>+------------+-----------------+</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>一共有3台机器,每台机器运行着两个进程.</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>机器 0 的平均耗时: ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>机器 1 的平均耗时: ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>机器 2 的平均耗时: ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Activity <span class=\"token punctuation\">(</span>machine_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> process_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> activity_type <span class=\"token keyword\">ENUM</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Activity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.712'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.52'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3.14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4.12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.55'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.43'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1.42'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4.512'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2.5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Activity <span class=\"token punctuation\">(</span>machine_id<span class=\"token punctuation\">,</span> process_id<span class=\"token punctuation\">,</span> activity_type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> a1<span class=\"token punctuation\">.</span>machine_id<span class=\"token punctuation\">,</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">.</span><span class=\"token keyword\">timestamp</span> <span class=\"token operator\">-</span> a1<span class=\"token punctuation\">.</span><span class=\"token keyword\">timestamp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> processing_time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> activity a1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">join</span> activity a2 <span class=\"token keyword\">on</span> a1<span class=\"token punctuation\">.</span>machine_id <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span>machine_id <span class=\"token operator\">and</span> a1<span class=\"token punctuation\">.</span>process_id <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span>process_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> a1<span class=\"token punctuation\">.</span>activity_type <span class=\"token operator\">=</span> <span class=\"token string\">'start'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">and</span> a2<span class=\"token punctuation\">.</span>activity_type <span class=\"token operator\">=</span> <span class=\"token string\">'end'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> a1<span class=\"token punctuation\">.</span>machine_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-员工奖金简单\"><a class=\"anchor\" href=\"#6-员工奖金简单\">#</a> 6. 员工奖金【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Employee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| empId       | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| name        | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| supervisor  | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| salary      | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>empId 是该表中具有唯一值的列。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>该表的每一行都表示员工的姓名和 id，以及他们的工资和经理的 id。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>表：Bonus</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+-------------+------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| Column Name | Type |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>+-------------+------+</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>| empId       | int  |</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>| bonus       | int  |</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>+-------------+------+</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>empId 是该表具有唯一值的列。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>empId 是 Employee 表中 empId 的外键(reference 列)。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>该表的每一行都包含一个员工的 id 和他们各自的奖金。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>编写解决方案，报告每个奖金 少于 1000 的员工的姓名和奖金数额。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>结果格式如下所示。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Employee table:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+-------+--------+------------+--------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| empId | name   | supervisor | salary |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+-------+--------+------------+--------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 3     | Brad   | null       | 4000   |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 1     | John   | 3          | 1000   |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 2     | Dan    | 3          | 2000   |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| 4     | Thomas | 3          | 4000   |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+-------+--------+------------+--------+</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Bonus table:</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>+-------+-------+</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| empId | bonus |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>+-------+-------+</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 2     | 500   |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 4     | 2000  |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>+-------+-------+</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>+------+-------+</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| name | bonus |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>+------+-------+</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| Brad | null  |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| John | null  |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>| Dan  | 500   |</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>+------+-------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Employee <span class=\"token punctuation\">(</span>empId <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> supervisor <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> salary <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Bonus <span class=\"token punctuation\">(</span>empId <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> bonus <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> supervisor<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Brad'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> supervisor<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> supervisor<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> supervisor<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Thomas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Bonus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Bonus <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> bonus<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'500'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Bonus <span class=\"token punctuation\">(</span>empId<span class=\"token punctuation\">,</span> bonus<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>bonus</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> employee e</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> bonus b <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>empId <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>empId</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span> b<span class=\"token punctuation\">.</span>bonus <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">or</span> b<span class=\"token punctuation\">.</span>bonus <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7-学生们参加各科测试的次数简单标注\"><a class=\"anchor\" href=\"#7-学生们参加各科测试的次数简单标注\">#</a> 7. 学生们参加各科测试的次数【简单】[标注]</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>学生表: Students</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| student_id    | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| student_name  | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>在 SQL 中，主键为 student_id（学生ID）。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>该表内的每一行都记录有学校一名学生的信息。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>科目表: Subjects</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| Column Name  | Type    |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| subject_name | varchar |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>在 SQL 中，主键为 subject_name（科目名称）。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>每一行记录学校的一门科目名称。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>考试表: Examinations</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>| Column Name  | Type    |</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>| student_id   | int     |</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| subject_name | varchar |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>+--------------+---------+</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>这个表可能包含重复数据（换句话说，在 SQL 中，这个表没有主键）。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>学生表里的一个学生修读科目表里的每一门科目。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>这张考试表的每一行记录就表示学生表里的某个学生参加了一次科目表里某门科目的测试。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>查询出每个学生参加每一门科目测试的次数，结果按 student_id 和 subject_name 排序。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>查询结构格式如下所示。</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Students table:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>| student_id | student_name |</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| 1          | Alice        |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| 2          | Bob          |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 13         | John         |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 6          | Alex         |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Subjects table:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>+--------------+</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| subject_name |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>+--------------+</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| Math         |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| Physics      |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>| Programming  |</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>+--------------+</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Examinations table:</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>| student_id | subject_name |</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>| 1          | Math         |</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>| 1          | Physics      |</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>| 1          | Programming  |</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>| 2          | Programming  |</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>| 1          | Physics      |</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>| 1          | Math         |</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>| 13         | Math         |</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>| 13         | Programming  |</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>| 13         | Physics      |</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>| 2          | Math         |</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>| 1          | Math         |</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>+------------+--------------+</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>+------------+--------------+--------------+----------------+</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>| student_id | student_name | subject_name | attended_exams |</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>+------------+--------------+--------------+----------------+</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>| 1          | Alice        | Math         | 3              |</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>| 1          | Alice        | Physics      | 2              |</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>| 1          | Alice        | Programming  | 1              |</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>| 2          | Bob          | Math         | 1              |</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>| 2          | Bob          | Physics      | 0              |</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>| 2          | Bob          | Programming  | 1              |</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>| 6          | Alex         | Math         | 0              |</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>| 6          | Alex         | Physics      | 0              |</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>| 6          | Alex         | Programming  | 0              |</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>| 13         | John         | Math         | 1              |</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>| 13         | John         | Physics      | 1              |</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>| 13         | John         | Programming  | 1              |</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>+------------+--------------+--------------+----------------+</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>结果表需包含所有学生和所有科目（即便测试次数为0）：</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Alice 参加了 3 次数学测试, 2 次物理测试，以及 1 次编程测试；</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Bob 参加了 1 次数学测试, 1 次编程测试，没有参加物理测试；</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Alex 啥测试都没参加；</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>John  参加了数学、物理、编程测试各 1 次。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Students <span class=\"token punctuation\">(</span>student_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> student_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Subjects <span class=\"token punctuation\">(</span>subject_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Examinations <span class=\"token punctuation\">(</span>student_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> subject_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Students<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Students <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> student_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Students <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> student_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Students <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> student_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Students <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> student_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Subjects<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Subjects <span class=\"token punctuation\">(</span>subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Subjects <span class=\"token punctuation\">(</span>subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Physics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Subjects <span class=\"token punctuation\">(</span>subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Programming'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Examinations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Physics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Programming'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Programming'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Physics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Programming'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'13'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Physics'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Examinations <span class=\"token punctuation\">(</span>student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Math'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>student_name<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>subject_name<span class=\"token punctuation\">,</span> IFNULL<span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>attended_exams<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> attended_exams</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Students s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CROSS</span> <span class=\"token keyword\">JOIN</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Subjects sub</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> student_id<span class=\"token punctuation\">,</span> subject_name<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> attended_exams</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">FROM</span> Examinations</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> student_id<span class=\"token punctuation\">,</span> subject_name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> grouped</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">ON</span> s<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">=</span> grouped<span class=\"token punctuation\">.</span>student_id <span class=\"token operator\">AND</span> sub<span class=\"token punctuation\">.</span>subject_name <span class=\"token operator\">=</span> grouped<span class=\"token punctuation\">.</span>subject_name</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> s<span class=\"token punctuation\">.</span>student_id<span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">.</span>subject_name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"8-至少有5名直接下属的经理中等标注\"><a class=\"anchor\" href=\"#8-至少有5名直接下属的经理中等标注\">#</a> 8. 至少有 5 名直接下属的经理【中等】[标注]</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表: Employee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id          | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| name        | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| department  | varchar |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| managerId   | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>id 是此表的主键（具有唯一值的列）。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>该表的每一行表示雇员的名字、他们的部门和他们的经理的id。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>如果managerId为空，则该员工没有经理。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>没有员工会成为自己的管理者。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>编写一个解决方案，找出至少有五个直接下属的经理。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>查询结果格式如下所示。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>示例 1:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>输入: </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Employee 表:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>+-----+-------+------------+-----------+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| id  | name  | department | managerId |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>+-----+-------+------------+-----------+</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 101 | John  | A          | Null      |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 102 | Dan   | A          | 101       |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| 103 | James | A          | 101       |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>| 104 | Amy   | A          | 101       |</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>| 105 | Anne  | A          | 101       |</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>| 106 | Ron   | B          | 101       |</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+-----+-------+------------+-----------+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>输出: </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| name |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| John |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>+------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Employee <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> department <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> managerId <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'102'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'103'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'104'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Amy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'105'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Anne'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> managerId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'106'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ron'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> Employee<span class=\"token punctuation\">.</span>Name <span class=\"token keyword\">as</span> Name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">select</span> ManagerId <span class=\"token keyword\">as</span> Id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">from</span> Employee</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> ManagerId</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">having</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Manager <span class=\"token keyword\">join</span> Employee</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">on</span> Manager<span class=\"token punctuation\">.</span>Id <span class=\"token operator\">=</span> Employee<span class=\"token punctuation\">.</span>Id</pre></td></tr></table></figure><h3 id=\"9-确认率中等\"><a class=\"anchor\" href=\"#9-确认率中等\">#</a> 9. 确认率【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表: Signups</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name    | Type     |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| user_id        | int      |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| time_stamp     | datetime |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>User_id是该表的主键。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>每一行都包含ID为user_id的用户的注册时间信息。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>表: Confirmations</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| Column Name    | Type     |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| user_id        | int      |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| time_stamp     | datetime |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>| action         | ENUM     |</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>(user_id, time_stamp)是该表的主键。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>user_id是一个引用到注册表的外键。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>action是类型为('confirmed'， 'timeout')的ENUM</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>该表的每一行都表示ID为user_id的用户在time_stamp请求了一条确认消息，该确认消息要么被确认('confirmed')，要么被过期('timeout')。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>用户的 确认率 是 'confirmed' 消息的数量除以请求的确认消息的总数。没有请求任何确认消息的用户的确认率为 0 。确认率四舍五入到 小数点后两位 。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>编写一个SQL查询来查找每个用户的 确认率 。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>查询结果格式如下所示。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>示例1:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Signups 表:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+---------+---------------------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| user_id | time_stamp          |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+---------+---------------------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 3       | 2020-03-21 10:16:13 |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 7       | 2020-01-04 13:57:59 |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 2       | 2020-07-29 23:09:44 |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| 6       | 2020-12-09 10:39:37 |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+---------+---------------------+</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Confirmations 表:</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>+---------+---------------------+-----------+</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| user_id | time_stamp          | action    |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>+---------+---------------------+-----------+</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 3       | 2021-01-06 03:30:46 | timeout   |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 3       | 2021-07-14 14:00:00 | timeout   |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>| 7       | 2021-06-12 11:57:29 | confirmed |</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>| 7       | 2021-06-13 12:58:28 | confirmed |</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>| 7       | 2021-06-14 13:59:27 | confirmed |</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| 2       | 2021-01-22 00:00:00 | confirmed |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>| 2       | 2021-02-28 23:59:59 | timeout   |</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>+---------+---------------------+-----------+</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>输出: </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>+---------+-------------------+</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>| user_id | confirmation_rate |</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>+---------+-------------------+</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>| 6       | 0.00              |</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>| 3       | 0.00              |</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>| 7       | 1.00              |</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>| 2       | 0.50              |</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>+---------+-------------------+</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>解释:</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>用户 6 没有请求任何确认消息。确认率为 0。</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>用户 3 进行了 2 次请求，都超时了。确认率为 0。</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>用户 7 提出了 3 个请求，所有请求都得到了确认。确认率为 1。</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>用户 2 做了 2 个请求，其中一个被确认，另一个超时。确认率为 1 / 2 = 0.5。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Signups <span class=\"token punctuation\">(</span>user_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> time_stamp <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Confirmations <span class=\"token punctuation\">(</span>user_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> time_stamp <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span> <span class=\"token keyword\">ENUM</span><span class=\"token punctuation\">(</span><span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Signups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Signups <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-03-21 10:16:13'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Signups <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-01-04 13:57:59'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Signups <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-07-29 23:09:44'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Signups <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2020-12-09 10:39:37'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Confirmations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-01-06 03:30:46'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-07-14 14:00:00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-06-12 11:57:29'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-06-13 12:58:28'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-06-14 13:59:27'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-01-22 00:00:00'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Confirmations <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> time_stamp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">action</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-02-28 23:59:59'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> s<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">,</span> ifnull<span class=\"token punctuation\">(</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token keyword\">action</span> <span class=\"token operator\">=</span> <span class=\"token string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.00</span><span class=\"token punctuation\">)</span> confirmation_rate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> signups s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> confirmations c <span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>user_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> s<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"三-聚合函数\"><a class=\"anchor\" href=\"#三-聚合函数\">#</a> 三、聚合函数</h2>\n<h3 id=\"1-有趣的电影简单\"><a class=\"anchor\" href=\"#1-有趣的电影简单\">#</a> 1. 有趣的电影【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：cinema</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name    | Type     |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id             | int      |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| movie          | varchar  |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| description    | varchar  |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| rating         | float    |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+----------------+----------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>id 是该表的主键(具有唯一值的列)。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>每行包含有关电影名称、类型和评级的信息。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>评级为 [0,10] 范围内的小数点后 2 位浮点数。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>编写解决方案，找出所有影片描述为 非 boring (不无聊) 的并且 id 为奇数 的影片。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>返回结果按 rating 降序排列。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>结果格式如下示例。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>|   id    | movie     |  description |  rating   |</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>|   1     | War       |   great 3D   |   8.9     |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>|   2     | Science   |   fiction    |   8.5     |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>|   3     | irish     |   boring     |   6.2     |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>|   4     | Ice song  |   Fantacy    |   8.6     |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>|   5     | House card|   Interesting|   9.1     |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>|   id    | movie     |  description |  rating   |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>|   5     | House card|   Interesting|   9.1     |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>|   1     | War       |   great 3D   |   8.9     |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+---------+-----------+--------------+-----------+</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>我们有三部电影，它们的 id 是奇数:1、3 和 5。id = 3 的电影是 boring 的，所以我们不把它包括在答案中。</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> cinema <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> movie <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> description <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rating <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> cinema<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'War'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'great 3D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Science'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fiction'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'irish'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boring'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6.2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ice song'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Fantacy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8.6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> cinema <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> movie<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'House card'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Interesting'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> cinema</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> description <span class=\"token operator\">&lt;></span> <span class=\"token string\">'boring'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">and</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> rating <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-平均售价简单\"><a class=\"anchor\" href=\"#2-平均售价简单\">#</a> 2. 平均售价【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Prices</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| product_id    | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| start_date    | date    |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| end_date      | date    |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| price         | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>(product_id，start_date，end_date) 是 prices 表的主键（具有唯一值的列的组合）。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>prices 表的每一行表示的是某个产品在一段时期内的价格。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>每个产品的对应时间段是不会重叠的，这也意味着同一个产品的价格时段不会出现交叉。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>表：UnitsSold</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>| product_id    | int     |</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>| purchase_date | date    |</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>| units         | int     |</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>该表可能包含重复数据。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>该表的每一行表示的是每种产品的出售日期，单位和产品 id。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>编写解决方案以查找每种产品的平均售价。average_price 应该 四舍五入到小数点后两位。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>返回结果表 无顺序要求 。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>结果格式如下例所示。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Prices table:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+------------+------------+------------+--------+</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| product_id | start_date | end_date   | price  |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>+------------+------------+------------+--------+</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 1          | 2019-02-17 | 2019-02-28 | 5      |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 1          | 2019-03-01 | 2019-03-22 | 20     |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| 2          | 2019-02-01 | 2019-02-20 | 15     |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>| 2          | 2019-02-21 | 2019-03-31 | 30     |</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+------------+------------+------------+--------+</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>UnitsSold table:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>+------------+---------------+-------+</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| product_id | purchase_date | units |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>+------------+---------------+-------+</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 1          | 2019-02-25    | 100   |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>| 1          | 2019-03-01    | 15    |</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>| 2          | 2019-02-10    | 200   |</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>| 2          | 2019-03-22    | 30    |</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>+------------+---------------+-------+</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>+------------+---------------+</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| product_id | average_price |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>+------------+---------------+</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>| 1          | 6.96          |</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>| 2          | 16.96         |</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>+------------+---------------+</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>平均售价 = 产品总价 / 销售的产品数量。</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>产品 1 的平均售价 = ((100 * 5)+(15 * 20) )/ 115 = 6.96</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>产品 2 的平均售价 = ((200 * 15)+(30 * 30) )/ 230 = 16.96</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Prices <span class=\"token punctuation\">(</span>product_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> start_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> end_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> price <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> UnitsSold <span class=\"token punctuation\">(</span>product_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> purchase_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> units <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Prices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Prices <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-17'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-28'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Prices <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-03-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-03-22'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'20'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Prices <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-20'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Prices <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> start_date<span class=\"token punctuation\">,</span> end_date<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-21'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-03-31'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> UnitsSold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> UnitsSold <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> purchase_date<span class=\"token punctuation\">,</span> units<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-25'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> UnitsSold <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> purchase_date<span class=\"token punctuation\">,</span> units<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-03-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'15'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> UnitsSold <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> purchase_date<span class=\"token punctuation\">,</span> units<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-02-10'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> UnitsSold <span class=\"token punctuation\">(</span>product_id<span class=\"token punctuation\">,</span> purchase_date<span class=\"token punctuation\">,</span> units<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-03-22'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    product_id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IFNULL<span class=\"token punctuation\">(</span><span class=\"token function\">Round</span><span class=\"token punctuation\">(</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>units<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> average_price</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Prices<span class=\"token punctuation\">.</span>product_id <span class=\"token keyword\">AS</span> product_id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Prices<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> UnitsSold<span class=\"token punctuation\">.</span>units <span class=\"token keyword\">AS</span> sales<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        UnitsSold<span class=\"token punctuation\">.</span>units <span class=\"token keyword\">AS</span> units</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">FROM</span> Prices</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> UnitsSold <span class=\"token keyword\">ON</span> Prices<span class=\"token punctuation\">.</span>product_id <span class=\"token operator\">=</span> UnitsSold<span class=\"token punctuation\">.</span>product_id</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">AND</span> <span class=\"token punctuation\">(</span>UnitsSold<span class=\"token punctuation\">.</span>purchase_date <span class=\"token operator\">BETWEEN</span> Prices<span class=\"token punctuation\">.</span>start_date <span class=\"token operator\">AND</span> Prices<span class=\"token punctuation\">.</span>end_date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span> T</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> product_id</pre></td></tr></table></figure><h3 id=\"3-项目员工i简单\"><a class=\"anchor\" href=\"#3-项目员工i简单\">#</a> 3. 项目员工 Ⅰ【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>项目表 Project： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| project_id  | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| employee_id | int     |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>主键为 (project_id, employee_id)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>employee_id 是员工表 Employee 表的外键。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>员工表 Employee：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>+------------------+---------+</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>| Column Name      | Type    |</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+------------------+---------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| employee_id      | int     |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>| name             | varchar |</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| experience_years | int     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>+------------------+---------+</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>主键是 employee_id。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>请写一个 SQL 语句，查询每一个项目中员工的 平均 工作年限，精确到小数点后两位。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>查询结果的格式如下：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Project 表：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>+-------------+-------------+</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>| project_id  | employee_id |</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>+-------------+-------------+</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>| 1           | 1           |</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 1           | 2           |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 1           | 3           |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| 2           | 1           |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>| 2           | 4           |</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>+-------------+-------------+</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Employee 表：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+-------------+--------+------------------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| employee_id | name   | experience_years |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+-------------+--------+------------------+</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 1           | Khaled | 3                |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 2           | Ali    | 2                |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| 3           | John   | 1                |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| 4           | Doe    | 2                |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>+-------------+--------+------------------+</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Result 表：</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>+-------------+---------------+</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| project_id  | average_years |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>+-------------+---------------+</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 1           | 2.00          |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 2           | 2.50          |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>+-------------+---------------+</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>第一个项目中，员工的平均工作年限是 (3 + 2 + 1) / 3 = 2.00；第二个项目中，员工的平均工作年限是 (3 + 2) / 2 = 2.50</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Project <span class=\"token punctuation\">(</span>project_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> employee_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Employee <span class=\"token punctuation\">(</span>employee_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> experience_years <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Project<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Project <span class=\"token punctuation\">(</span>project_id<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Project <span class=\"token punctuation\">(</span>project_id<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Project <span class=\"token punctuation\">(</span>project_id<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Project <span class=\"token punctuation\">(</span>project_id<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Project <span class=\"token punctuation\">(</span>project_id<span class=\"token punctuation\">,</span> employee_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Employee<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>employee_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> experience_years<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Khaled'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>employee_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> experience_years<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Ali'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>employee_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> experience_years<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Employee <span class=\"token punctuation\">(</span>employee_id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> experience_years<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> T<span class=\"token punctuation\">.</span>project_id<span class=\"token punctuation\">,</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">.</span>experience_years<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> average_years</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> p<span class=\"token punctuation\">.</span>project_id <span class=\"token keyword\">as</span> project_id<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>experience_years <span class=\"token keyword\">as</span> experience_years</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">from</span> project p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> employee e <span class=\"token keyword\">on</span> p<span class=\"token punctuation\">.</span>employee_id <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>employee_id<span class=\"token punctuation\">)</span> T</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> T<span class=\"token punctuation\">.</span>project_id</pre></td></tr></table></figure><h3 id=\"4-各赛事的用户注册率简单\"><a class=\"anchor\" href=\"#4-各赛事的用户注册率简单\">#</a> 4. 各赛事的用户注册率【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用户表： Users</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| user_id     | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| user_name   | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>user_id 是该表的主键(具有唯一值的列)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>该表中的每行包括用户 ID 和用户名。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>注册表： Register</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>| contest_id  | int     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>| user_id     | int     |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>(contest_id, user_id) 是该表的主键(具有唯一值的列的组合)。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>该表中的每行包含用户的 ID 和他们注册的赛事。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>编写解决方案统计出各赛事的用户注册百分率，保留两位小数。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>返回的结果表按 percentage 的 降序 排序，若相同则按 contest_id 的 升序 排序。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>返回结果如下示例所示。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Users 表：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+---------+-----------+</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>| user_id | user_name |</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+---------+-----------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| 6       | Alice     |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 2       | Bob       |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 7       | Alex      |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>+---------+-----------+</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Register 表：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>+------------+---------+</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>| contest_id | user_id |</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+------------+---------+</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>| 215        | 6       |</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>| 209        | 2       |</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| 208        | 2       |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>| 210        | 6       |</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| 208        | 6       |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>| 209        | 7       |</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>| 209        | 6       |</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>| 215        | 7       |</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>| 208        | 7       |</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>| 210        | 2       |</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>| 207        | 2       |</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>| 210        | 7       |</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>+------------+---------+</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>+------------+------------+</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>| contest_id | percentage |</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>+------------+------------+</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>| 208        | 100.0      |</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>| 209        | 100.0      |</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>| 210        | 100.0      |</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>| 215        | 66.67      |</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>| 207        | 33.33      |</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>+------------+------------+</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>所有用户都注册了 208、209 和 210 赛事，因此这些赛事的注册率为 100<span class=\"token comment\">% ，我们按 contest_id 的降序排序加入结果表中。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Alice 和 Alex 注册了 215 赛事，注册率为 ((2/3) * 100) = 66.67<span class=\"token comment\">%</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Bob 注册了 207 赛事，注册率为 ((1/3) * 100) = 33.33<span class=\"token comment\">%</span></pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Users <span class=\"token punctuation\">(</span>user_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> user_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Register <span class=\"token punctuation\">(</span>contest_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> user_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Users<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Users <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> user_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Users <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> user_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Users <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> user_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Register<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'215'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'208'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'210'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'208'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'209'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'215'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'208'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'210'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'207'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Register <span class=\"token punctuation\">(</span>contest_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'210'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> contest_id<span class=\"token punctuation\">,</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> percentage</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> Register</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> contest_id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> percentage <span class=\"token keyword\">desc</span><span class=\"token punctuation\">,</span> contest_id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5-查询结果的质量和占比简单\"><a class=\"anchor\" href=\"#5-查询结果的质量和占比简单\">#</a> 5. 查询结果的质量和占比【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Queries 表： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| query_name  | varchar |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| result      | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| position    | int     |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| rating      | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>+-------------+---------+</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>此表可能有重复的行。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>此表包含了一些从数据库中收集的查询信息。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>“位置”（position）列的值为 1 到 500 。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>“评分”（rating）列的值为 1 到 5 。评分小于 3 的查询被定义为质量很差的查询。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>将查询结果的质量 quality 定义为：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>各查询结果的评分与其位置之间比率的平均值。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>将劣质查询百分比 poor_query_percentage 为：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>评分小于 3 的查询结果占全部查询结果的百分比。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>编写解决方案，找出每次的 query_name 、 quality 和 poor_query_percentage。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>quality 和 poor_query_percentage 都应 四舍五入到小数点后两位 。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>结果格式如下所示：</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>示例 1：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Queries table:</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>+------------+-------------------+----------+--------+</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>| query_name | result            | position | rating |</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+------------+-------------------+----------+--------+</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| Dog        | Golden Retriever  | 1        | 5      |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| Dog        | German Shepherd   | 2        | 5      |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>| Dog        | Mule              | 200      | 1      |</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>| Cat        | Shirazi           | 5        | 2      |</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>| Cat        | Siamese           | 3        | 3      |</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>| Cat        | Sphynx            | 7        | 4      |</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+------------+-------------------+----------+--------+</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>+------------+---------+-----------------------+</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>| query_name | quality | poor_query_percentage |</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>+------------+---------+-----------------------+</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>| Dog        | 2.50    | 33.33                 |</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>| Cat        | 0.66    | 33.33                 |</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>+------------+---------+-----------------------+</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Dog 查询结果的质量为 ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Dog 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Cat 查询结果的质量为 ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Cat 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> Queries <span class=\"token punctuation\">(</span>query_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> position <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> rating <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> Queries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Golden Retriever'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'German Shepherd'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mule'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'200'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Shirazi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Siamese'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Queries <span class=\"token punctuation\">(</span>query_name<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sphynx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> query_name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>rating <span class=\"token operator\">/</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>                        quality<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rating <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> poor_query_percentage</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> queries</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> query_name <span class=\"token keyword\">having</span> query_name <span class=\"token operator\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-每月交易i中等\"><a class=\"anchor\" href=\"#6-每月交易i中等\">#</a> 6. 每月交易 Ⅰ【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表：Transactions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| Column Name   | Type    |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| id            | int     |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| country       | varchar |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>| state         | enum    |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>| amount        | int     |</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>| trans_date    | date    |</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>+---------------+---------+</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>id 是这个表的主键。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>该表包含有关传入事务的信息。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>state 列类型为 <span class=\"token punctuation\">[</span>\"approved\", \"declined\"<span class=\"token punctuation\">]</span> 之一。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>编写一个 sql 查询来查找每个月和每个国家/地区的事务数及其总金额、已批准的事务数及其总金额。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>以 任意顺序 返回结果表。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>查询结果格式如下所示。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>示例 1:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>输入：</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Transactions table:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>+------+---------+----------+--------+------------+</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>| id   | country | state    | amount | trans_date |</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>+------+---------+----------+--------+------------+</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>| 121  | US      | approved | 1000   | 2018-12-18 |</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>| 122  | US      | declined | 2000   | 2018-12-19 |</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>| 123  | US      | approved | 2000   | 2019-01-01 |</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>| 124  | DE      | approved | 2000   | 2019-01-07 |</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>+------+---------+----------+--------+------------+</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>输出：</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+----------+---------+-------------+----------------+--------------------+-----------------------+</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>+----------+---------+-------------+----------------+--------------------+-----------------------+</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>+----------+---------+-------------+----------------+--------------------+-----------------------+</pre></td></tr></table></figure><blockquote>\n<p>建表语句</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">If</span> <span class=\"token operator\">Not</span> <span class=\"token keyword\">Exists</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> country <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> state <span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'declined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> amount <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> trans_date <span class=\"token keyword\">date</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">Truncate</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">Transactions</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> trans_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'121'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'US'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2018-12-18'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> trans_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'122'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'US'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'declined'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2018-12-19'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> trans_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'US'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-01-01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">Transactions</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> trans_date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'124'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2019-01-07'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>答案</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> date_format<span class=\"token punctuation\">(</span>trans_date<span class=\"token punctuation\">,</span> <span class=\"token string\">'%Y-%m'</span><span class=\"token punctuation\">)</span>       <span class=\"token keyword\">as</span> <span class=\"token keyword\">month</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       country<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>                               <span class=\"token keyword\">as</span> trans_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token keyword\">as</span> approved_count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span>                            <span class=\"token keyword\">as</span> trans_total_amount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> approved_total_amount</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token keyword\">transactions</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token keyword\">month</span><span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7即时食物配送ii中等\"><a class=\"anchor\" href=\"#7即时食物配送ii中等\">#</a> 7. 即时食物配送 Ⅱ【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"8-游戏玩法分析iv中等\"><a class=\"anchor\" href=\"#8-游戏玩法分析iv中等\">#</a> 8. 游戏玩法分析 Ⅳ【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h2 id=\"四-排序分组\"><a class=\"anchor\" href=\"#四-排序分组\">#</a> 四、排序分组</h2>\n<h3 id=\"1-每位教师所教授的科目种类的数量简单\"><a class=\"anchor\" href=\"#1-每位教师所教授的科目种类的数量简单\">#</a> 1. 每位教师所教授的科目种类的数量【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"2查询近30天活跃用户数简单\"><a class=\"anchor\" href=\"#2查询近30天活跃用户数简单\">#</a> 2. 查询近 30 天活跃用户数【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"3-销售分析iii简单\"><a class=\"anchor\" href=\"#3-销售分析iii简单\">#</a> 3. 销售分析 Ⅲ【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"4-超过5名学生的课简单\"><a class=\"anchor\" href=\"#4-超过5名学生的课简单\">#</a> 4. 超过 5 名学生的课【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"6-求关注者的数量简单\"><a class=\"anchor\" href=\"#6-求关注者的数量简单\">#</a> 6. 求关注者的数量【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"7-只出现一次的最大数字简单\"><a class=\"anchor\" href=\"#7-只出现一次的最大数字简单\">#</a> 7. 只出现一次的最大数字【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"8-买下所有产品的客户中等\"><a class=\"anchor\" href=\"#8-买下所有产品的客户中等\">#</a> 8. 买下所有产品的客户【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h2 id=\"五-高级查询和连接\"><a class=\"anchor\" href=\"#五-高级查询和连接\">#</a> 五、高级查询和连接</h2>\n<h3 id=\"1-每位经理的下属员工数量简单\"><a class=\"anchor\" href=\"#1-每位经理的下属员工数量简单\">#</a> 1.  每位经理的下属员工数量【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"2-员工的直属部门简单\"><a class=\"anchor\" href=\"#2-员工的直属部门简单\">#</a> 2. 员工的直属部门【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"3-判断三角形简单\"><a class=\"anchor\" href=\"#3-判断三角形简单\">#</a> 3. 判断三角形【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"4-连续出现的数字中等\"><a class=\"anchor\" href=\"#4-连续出现的数字中等\">#</a> 4. 连续出现的数字【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"5-指定日期的产品价格中等\"><a class=\"anchor\" href=\"#5-指定日期的产品价格中等\">#</a> 5. 指定日期的产品价格【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"6-最后一个进入巴士的人中等\"><a class=\"anchor\" href=\"#6-最后一个进入巴士的人中等\">#</a> 6. 最后一个进入巴士的人【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"7-按分类统计薪水中等\"><a class=\"anchor\" href=\"#7-按分类统计薪水中等\">#</a> 7. 按分类统计薪水【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h2 id=\"六-高级字符串函数正则表达式子句\"><a class=\"anchor\" href=\"#六-高级字符串函数正则表达式子句\">#</a> 六、高级字符串函数 / 正则表达式 / 子句</h2>\n<h3 id=\"1-修复表中的名字简单\"><a class=\"anchor\" href=\"#1-修复表中的名字简单\">#</a> 1.  修复表中的名字【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"2-患某种疾病的患者简单\"><a class=\"anchor\" href=\"#2-患某种疾病的患者简单\">#</a> 2. 患某种疾病的患者【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"3-删除重复的电子邮箱简单\"><a class=\"anchor\" href=\"#3-删除重复的电子邮箱简单\">#</a> 3. 删除重复的电子邮箱【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"4-第二高的薪水中等\"><a class=\"anchor\" href=\"#4-第二高的薪水中等\">#</a> 4. 第二高的薪水【中等】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"5-按日期分组销售产品简单\"><a class=\"anchor\" href=\"#5-按日期分组销售产品简单\">#</a> 5. 按日期分组销售产品【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"6-列出指定时间段内所有的下单产品简单\"><a class=\"anchor\" href=\"#6-列出指定时间段内所有的下单产品简单\">#</a> 6. 列出指定时间段内所有的下单产品【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<h3 id=\"7-查找拥有有效邮箱的用户简单\"><a class=\"anchor\" href=\"#7-查找拥有有效邮箱的用户简单\">#</a> 7. 查找拥有有效邮箱的用户【简单】</h3>\n<blockquote>\n<p>问题描述</p>\n</blockquote>\n<pre><code class=\"language-tex\">\n</code></pre>\n<blockquote>\n<p>建表语句</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n<blockquote>\n<p>答案</p>\n</blockquote>\n<pre><code class=\"language-sql\">\n</code></pre>\n",
            "tags": [
                "数据库",
                "LeetCode",
                "数据库",
                "SQL"
            ]
        }
    ]
}